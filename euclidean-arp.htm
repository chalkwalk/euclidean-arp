<html>
<head>
    <title>MPE Euclidean Arpeggiator</title>
    <style>
        body { font-family: sans-serif; }
        .rhythm-display { display: flex; margin-bottom: 10px; }
        .rhythm-step {
            width: 25px; /* Slightly wider steps for better visual clarity */
            height: 25px; /* Slightly taller steps for better visual clarity */
            border: 1px solid #ccc; /* Reduced border weight */
            text-align: center;
            line-height: 25px; /* Match line-height to height */
            font-size: 12px;
            margin-right: 2px; /* Add spacing between steps */
            border-radius: 3px; /* Slightly rounded corners for a softer look */
            background-color: #f0f0f0; /* Default step background color */
            color: #333; /* Darker text for better contrast */
        }
        .rhythm-step.beat { background-color: #b2f0b2; border-color: #8fcc8f; color: #005000; /* Muted green for beats */ }
        .rhythm-step.rest { background-color: #f0b2b2; border-color: #cc8f8f; color: #500000; /* Muted red for rests */ }
        .rhythm-step.skip { background-color: #b2b2f0; border-color: #8f8fcc; color: #000050; /* Muted blue for skips */ }
        .rhythm-step.note { background-color: #f0f0b2; border-color: #ccf08f; color: #505000; /* Muted yellow for notes */ }
        .rhythm-step.current-step { border: 2px solid blue; /* Stronger current step highlight */ }
        .rhythm-step.disabled-step {
            background-color: #e0e0e0; /* Greyed out background */
            border-color: #bbb;       /* Lighter border */
            color: #999;              /* Lighter text color */
        }
        .rhythm-step.gate-extended-step {
            background-color: #cceeff; /* Light blue for gate extension */
            border-color: #aaccdd;
        }


        .parameter-group { margin-bottom: 10px; border: 1px solid #ccc; padding: 10px; border-radius: 5px; /* Added border and padding to parameter groups */ background-color: #fafafa; /* Lighter background for parameter groups */ }
        .parameter-group h3 { margin-top: 0; color: #555; /* Slightly darker heading text */ }
        .note-selector { margin-bottom: 10px; }
        .piano-keyboard { display: flex; border: 1px solid #aaa; border-radius: 5px; overflow: hidden; /* Added border to keyboard */ }
        .key {
            height: 80px;
            border-left: 1px solid #ddd; /* Lighter key borders */
            border-bottom: 1px solid #bbb; /* Slightly darker bottom border for depth */
            box-sizing: border-box;
            cursor: pointer;
            display: flex;
            align-items: flex-end;
            justify-content: center;
            padding-bottom: 5px;
            font-size: 10px;
            user-select: none; /* Prevent text selection on click */
            transition: background-color 0.1s ease; /* Smooth background color transition */
        }
        .white-key {
            width: 30px;
            background-color: white;
            color: black;
        }
        .black-key {
            width: 20px;
            background-color: black;
            color: white;
            height: 55px;
            margin-left: -10px;
            margin-right: -10px;
            z-index: 1; /* Ensure black keys are on top */
            border-bottom: 1px solid #333; /* Darker bottom border for black keys */
        }
        .key.key-held-ui {
            background-color: #aaddff; /* Distinct light blue for UI held keys */
            color: black; /* Ensure text is readable on highlight */
            border-bottom: unset;
        }
        .key.key-held-midi {
            background-color: #aaffaa; /* Distinct light green for MIDI held keys */
            color: black; /* Ensure text is readable on highlight */
            border-bottom: unset;
        }
        .key.key-current {
            border: 2px solid #ccc; /* Example highlight style */
            background-color: #ffddaa; /* Softer yellow for current note highlight */
            border-bottom: unset;
        }

        .playback-keyboard-container { display: flex; justify-content: center; margin-bottom: 10px; } /* Center the playback keyboard */
        .playback-keyboard { display: flex; border: 1px solid #aaa; border-radius: 5px; overflow: hidden; width: 600px; height: 40px; /* Fixed width and height for mini keyboard */ }
        .playback-key {
            height: 100%; /* Keys fill the height of the playback keyboard */
            border-left: 1px solid #ddd;
            border-bottom: 1px solid #bbb;
            box-sizing: border-box;
            display: flex;
            align-items: flex-end;
            justify-content: center;
            padding-bottom: 2px; /* Reduced padding */
            font-size: 8px; /* Smaller font size */
            user-select: none;
            transition: background-color 0.1s ease;
            cursor: default; /* Non-interactive cursor */
        }
        .playback-white-key {
            width: calc(600px / 25 * 3/5); /* Adjust width based on total width and number of keys */
            background-color: white;
            color: black;
        }
        .playback-black-key {
            width: calc(600px / 25 * 2/5); /* Adjust width based on total width and number of keys */
            background-color: black;
            color: white;
            height: 70%; /* Black keys are shorter */
            margin-left: calc(-600px / 25 * 1/5);
            margin-right: calc(-600px / 25 * 1/5);
            z-index: 1;
            border-bottom: 1px solid #333;
        }
        .playback-key.key-held-ui { /* Style for UI held notes on playback keyboard */
            background-color: #99ccee; /* Lighter shade of blue */
            border-bottom: unset;
        }
        .playback-key.key-held-midi { /* Style for MIDI held notes on playback keyboard */
            background-color: #ccffcc; /* Lighter shade of green */
            border-bottom: unset;
        }
        .playback-key.key-held-octave-expanded { /* New style for octave-expanded notes */
            background-color: #cceeff; /* A very light blue/grey, less prominent than UI/MIDI held */
            color: black; /* Ensure text is readable if you decide to add text to these keys */
            border-bottom: unset;
        }
        .playback-key.key-current { /* Style for currently playing notes on playback keyboard */
            background-color: #ffddaa; /* Very light yellow */
            border: 1px solid #ccc; /* Add border to current key on playback keyboard */
            border-bottom: unset;
        }
        .playback-display { display: flex; overflow-x: hidden; border: 1px solid #ccc; height: 30px; margin-bottom: 10px; background-color: #eee; border-radius: 3px; /* Added background and border-radius to playback display */ padding-left: 5px; }
        .playback-step {
            width: 20px;
            height: 20px;
            border: 1px solid #ddd; /* Lighter border for playback steps */
            margin-right: 2px;
            text-align: center;
            line-height: 20px;
            font-size: 10px;
            border-radius: 2px; /* Slightly rounded corners for playback steps */
            background-color: #fff; /* Default playback step background */
        }
        .playback-step.note { background-color: #ffffdd; /* Light yellow for note playback */ }
        .playback-step.rest { background-color: #ffdddd; /* Light red for rest playback */ }
        .playback-step.skip { background-color: #ddddff; /* Light blue for skip playback */ }
        .device-selector { margin-bottom: 10px; }
        .slider-container {
            display: flex;
            align-items: center; /* Vertically align label and slider */
            margin-bottom: 5px; /* Add spacing between slider containers */
        }
        .slider-container label {
            margin-right: 10px; /* Space between label and slider */
            width: 120px; /* Wider fixed width for labels to align them */
            text-align: right; /* Right-align label text */
            font-size: 0.9em; /* Slightly smaller label font size */
            color: #666; /* Muted label color */
        }
        .slider-container input[type="range"] {
            width: 300px; /* Adjust slider width as needed */
        }
        .number-display {
            width: 30px; /* Fixed width for number display */
            text-align: center;
            margin-left: 5px;
            font-size: 0.9em; /* Slightly smaller number display font size */
            color: #777; /* Muted number display color */
        }

        #tempoBPM { /* Tempo BPM input now serves as display as well */
            display: inline-block;
            margin-left: 10px;
            font-weight: bold;
            font-size: 1.2em; /* Larger tempo display */
            color: #333; /* Darker tempo text */
            border: none; /* Remove border */
            background-color: transparent; /* Make background transparent */
            width: auto; /* Adjust width to content */
            padding: 0; /* Remove padding */
            text-align: left; /* Align text left */
        }
        #tempoBPM:read-only { /* Style for read-only state */
            cursor: default; /* Default cursor for read-only */
            color: #777; /* Muted color when read-only */
            font-weight: normal; /* Normal font weight when read-only */
        }

        #midiStatus {
            margin-bottom: 10px;
            font-size: 0.9em;
            color: #777;
        }
        h1 {
            color: #333;
            border-bottom: 2px solid #ddd;
            padding-bottom: 5px;
        }
        h3 {
            margin-top: 0;
            color: #555;
        }
        label {
            font-size: 0.95em;
            color: #444;
            margin-right: 5px;
        }
        select, input[type="number"], input[type="range"], button, input[type="checkbox"] {
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 3px;
            font-size: 0.9em;
            margin-bottom: 5px;
        }
        button {
            background-color: #eee;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        button:hover {
            background-color: #ddd;
        }
        button:disabled {
            background-color: #f0f0f0;
            color: #999;
            cursor: default;
        }
        #startButton.playing {
            background-color: lightgreen;
        }
        #stopButton.playing {
            background-color: lightcoral;
        }

        /* --- TAB STYLES --- */
        .tab-container {
            border: 1px solid #ccc;
            border-radius: 5px;
            overflow: hidden;
            background-color: #fafafa;
            margin-bottom: 10px;
        }

        .tab-buttons {
            display: flex;
            background-color: #eee;
            border-bottom: 1px solid #ccc;
        }

        .tab-button {
            padding: 10px 15px;
            border: none;
            background-color: transparent;
            cursor: pointer;
            border-right: 1px solid #ccc;
            font-size: 0.9em;
            color: #555;
        }

        .tab-button:last-child {
            border-right: none;
        }

        .tab-button.active {
            background-color: #fafafa;
            color: #333;
            font-weight: bold;
        }

        .tab-content {
            padding: 10px;
        }

        .tab-pane {
            display: none; /* Initially hide all tab panes */
        }

        .tab-pane.active {
            display: block; /* Show active tab pane */
        }
    </style>
</head>
<body>
    <h1>MPE Euclidean Arpeggiator</h1>

    <div class="note-selector" title="Use this keyboard to select notes with the mouse.">
        <strong>Select UI Notes:</strong>
        <div class="piano-keyboard" id="pianoKeyboard">
        </div>
    </div>

    <div class="tab-container">
        <div class="tab-buttons">
            <button class="tab-button active" data-tab="midi-mpe-tab">MIDI & MPE</button>
            <button class="tab-button" data-tab="pattern-tab">Pattern</button>
            <button class="tab-button" data-tab="rhythm-tab">Rhythm</button>
            <button class="tab-button" data-tab="arp-tab">Arp</button>
        </div>

        <div id="midi-mpe-tab" class="tab-content tab-pane active">
            <fieldset class="parameter-group">
                <legend><h3>MIDI & MPE Settings</h3></legend>

			    <div id="midiStatus">MIDI Status: Not connected</div>

			    <div class="device-selector" title="Select your MIDI input device.">
			        <label for="midiInputSelect">MIDI Input:</label>
			        <select id="midiInputSelect" title="Choose the MIDI input device to receive notes and clock from.">
			            <option value="">No input device selected</option>
			        </select>
			    </div>

			    <div class="device-selector" title="Select your MIDI output device.">
			        <label for="midiOutputSelect">MIDI Output:</label>
			        <select id="midiOutputSelect" title="Choose the MIDI output device to send arpeggiated notes to.">
			            <option value="">No output device selected</option>
			        </select>
			    </div>

                <div class="slider-container" title="Source of tempo: internal BPM or external MIDI clock.">
                    <label for="tempoSource">Tempo Source:</label>
                    <select id="tempoSource" title="Choose whether the tempo is controlled internally or by external MIDI clock.">
                        <option value="internal">Internal</option>
                        <option value="external">External MIDI Clock</option>
                    </select>
                </div>

                <div class="slider-container" title="Tempo in Beats Per Minute (BPM). Only active when Tempo Source is Internal.">
                    <label for="tempoBPM">Tempo:</label>
                    <input type="number" id="tempoBPM" value="120" min="10" max="300" title="Set the tempo in BPM for internal clock.">
                </div>

                <div class="slider-container" title="Enable or disable MPE input processing.">
                    <input type="checkbox" id="enableMPE" title="Enable MPE (MIDI Polyphonic Expression) input for per-note control.">
                    <label for="enableMPE" style="text-align: left; width: auto;">Enable MPE Input</label>
                </div>

                <div class="slider-container" title="MIDI channel for MPE global messages or Omni for all channels.">
                    <label for="mpeGlobalInputChannel">MPE Global Input Channel:</label>
                    <select id="mpeGlobalInputChannel" title="Set the MIDI channel for MPE global control messages, or Omni to listen to all channels.">
                        <option value="omni">Omni</option>
                        <option value="1">Channel 1</option>
                        <option value="2">Channel 2</option>
                        <option value="3">Channel 3</option>
                        <option value="4">Channel 4</option>
                        <option value="5">Channel 5</option>
                        <option value="6">Channel 6</option>
                        <option value="7">Channel 7</option>
                        <option value="8">Channel 8</option>
                        <option value="9">Channel 9</option>
                        <option value="10">Channel 10</option>
                        <option value="11">Channel 11</option>
                        <option value="12">Channel 12</option>
                        <option value="13">Channel 13</option>
                        <option value="14">Channel 14</option>
                        <option value="15">Channel 15</option>
                        <option value="16">Channel 16</option>
                    </select>
                </div>

                <div class="slider-container" title="Number of MIDI channels used for MPE voice messages.">
                    <label for="mpeInputVoiceChannels">MPE Input Voice Channels:</label>
                    <input type="number" id="mpeInputVoiceChannels" value="8" min="1" max="15" title="Specify the number of MIDI channels to use for MPE voice messages.">
                </div>

                <div class="slider-container" title="Output mode: Non-MPE (single channel) or MPE.">
                    <label for="mpeOutputMode">MPE Output Mode:</label>
                    <select id="mpeOutputMode" title="Choose the MIDI output mode: Non-MPE (single channel) or MPE.">
                        <option value="non-mpe">Non-MPE (Single Channel)</option>
                        <option value="mpe">MPE</option>
                    </select>
                </div>

                <div class="slider-container" title="MIDI channel for MPE global output or base channel for non-MPE.">
                    <label for="mpeGlobalOutputChannel">MPE Global Output / Base Channel:</label>
                    <select id="mpeGlobalOutputChannel" title="Set the MIDI channel for MPE global output or the base channel for non-MPE output.">
                        <option value="1">Channel 1</option>
                        <option value="2">Channel 2</option>
                        <option value="3">Channel 3</option>
                        <option value="4">Channel 4</option>
                        <option value="5">Channel 5</option>
                        <option value="6">Channel 6</option>
                        <option value="7">Channel 7</option>
                        <option value="8">Channel 8</option>
                        <option value="9">Channel 9</option>
                        <option value="10">Channel 10</option>
                        <option value="11">Channel 11</option>
                        <option value="12">Channel 12</option>
                        <option value="13">Channel 13</option>
                        <option value="14">Channel 14</option>
                        <option value="15">Channel 15</option>
                        <option value="16">Channel 16</option>
                    </select>
                </div>
            </fieldset>
        </div>

        <div id="pattern-tab" class="tab-content tab-pane">
            <fieldset class="parameter-group">
                <legend><h3>Pattern Settings</h3></legend>
                <div class="slider-container" title="Enable or disable the pattern rhythm.">
                    <input type="checkbox" id="enablePattern" checked title="Enable pattern rhythm to introduce skips.">
                    <label for="enablePattern" style="text-align: left; width: auto;">Enable Pattern</label>
                </div>
                <div class="slider-container" title="Number of steps in the pattern rhythm.">
                    <label for="patternSteps">Steps:</label>
                    <input type="range" id="patternSteps" value="5" min="1" max="32" step="1" title="Adjust the number of steps in the pattern.">
                    <span id="patternStepsValue" class="number-display">5</span>
                </div>
                <div class="slider-container" title="Number of beats within the pattern steps.">
                    <label for="patternBeats">Beats:</label>
                    <input type="range" id="patternBeats" value="3" min="1" max="5" step="1" title="Adjust the number of beats in the pattern rhythm.">
                    <span id="patternBeatsValue" class="number-display">3</span>
                </div>
                <div class="slider-container" title="Offset (rotation) of the pattern rhythm.">
                    <label for="patternOffset">Offset:</label>
                    <input type="range" id="patternOffset" value="0" min="-2" max="2" step="1" title="Shift the pattern rhythm forwards or backwards.">
                    <span id="patternOffsetValue" class="number-display">0</span>
                </div>
                <div id="patternDisplay" class="rhythm-display" title="Visual representation of the pattern rhythm (Note/Skip)."></div>
            </fieldset>
        </div>

        <div id="rhythm-tab" class="tab-content tab-pane">
            <fieldset class="parameter-group">
                <legend><h3>Rhythm Settings</h3></legend>
                 <div class="slider-container" title="Enable or disable the arpeggio rhythm.">
                    <input type="checkbox" id="enableRhythm" checked title="Enable arpeggio rhythm to introduce rests.">
                    <label for="enableRhythm" style="text-align: left; width: auto;">Enable Rhythm</label>
                </div>
                <div class="slider-container" title="Number of steps in the arpeggio rhythm.">
                    <label for="rhythmSteps">Steps:</label>
                    <input type="range" id="rhythmSteps" value="7" min="1" max="32" step="1" title="Adjust the number of steps in the arpeggio rhythm.">
                    <span id="rhythmStepsValue" class="number-display">7</span>
                </div>
                <div class="slider-container" title="Number of beats within the arpeggio rhythm steps.">
                    <label for="rhythmBeats">Beats:</label>
                    <input type="range" id="rhythmBeats" value="5" min="1" max="7" step="1" title="Adjust the number of beats in the arpeggio rhythm.">
                    <span id="rhythmBeatsValue" class="number-display">5</span>
                </div>
                <div class="slider-container" title="Offset (rotation) of the arpeggio rhythm.">
                    <label for="rhythmOffset">Offset:</label>
                    <input type="range" id="rhythmOffset" value="0" min="-4" max="4" step="1" title="Shift the arpeggio rhythm forwards or backwards.">
                    <span id="rhythmOffsetValue" class="number-display">0</span>
                </div>
                <div id="rhythmDisplay" class="rhythm-display" title="Visual representation of the arpeggio rhythm (Beat/Rest)."></div>
            </fieldset>
        </div>

        <div id="arp-tab" class="tab-content tab-pane">
            <fieldset class="parameter-group">
                <legend><h3>Arp Settings</h3></legend>

                <div class="slider-container" title="Clock division for arpeggiator step timing.">
                    <label for="clockDivision">Clock Division:</label>
                    <select id="clockDivision" title="Set the clock division to control the speed of the arpeggio steps.">
                        <option value="1/1">1/1</option>
                        <option value="1/2">1/2</option>
                        <option value="1/4" selected="selected">1/4</option>
                        <option value="1/8">1/8</option>
                        <option value="1/16">1/16</option>
                        <option value="1/32">1/32</option>
                        <option value="1/2T">1/2T</option>
                        <option value="1/4T">1/4T</option>
                        <option value="1/8T">1/8T</option>
                        <option value="1/16T">1/16T</option>
                        <option value="1/32T">1/32T</option>
                    </select>
                </div>

                <div class="slider-container" title="Arpeggio mode determines the order notes are played.">
                    <label for="arpMode">Arp Mode:</label>
                    <select id="arpMode" title="Select the arpeggio playback mode.">
                        <option value="up" selected="selected">Up</option>
                        <option value="down">Down</option>
                        <option value="upDown">Up/Down</option>
                        <option value="upDownInclusive">Up/Down (Incl.)</option>
                        <option value="random">Random</option>
                        <option value="converge">Converge</option>
                        <option value="diverge">Diverge</option>
                        <option value="played">Played</option>
                        <option value="shuffled">Shuffled</option>
                        <option value="stableShuffled">Stable Shuffled</option>
                        <option value="chord">Chord</option>
                        <option value="chordN">ChordN</option>
                        <option value="convergeDiverge">Converge/Diverge</option>
                        <option value="convergeDivergeInclusive">Converge/Diverge (Incl.)</option>
                        <option value="walk">Walk</option>
                        <option value="normalWalk">Normal Walk</option>
                    </select>
                </div>

                <div id="chordNControls" style="display: none;">
                    <div class="slider-container" title="Number of notes in each chord for ChordN mode.">
                        <label for="chordNValue">N:</label>
                        <input type="range" id="chordNValue" value="2" min="1" max="16" step="1" title="Set the number of notes per chord in ChordN arpeggio mode.">
                        <span id="chordNValueDisplay" class="number-display">2</span>
                    </div>
                    <div class="slider-container" title="Ordering mode for ChordN chords.">
                        <label for="chordNOrdering">ChordN Ordering:</label>
                        <select id="chordNOrdering" title="Select the ordering mode for ChordN chords.">
                            <option value="up">Up</option>
                            <option value="down">Down</option>
                            <option value="upDown">Up/Down</option>
                            <option value="upDownInclusive">Up/Down (Incl.)</option>
                            <option value="converge">Converge</option>
                            <option value="diverge">Diverge</option>
                        </select>
                    </div>
                </div>

                <div id="walkParams" style="display: none;">
                    <div class="slider-container" title="Skew parameter for Walk arpeggio mode.">
                        <label for="walkSkew">Walk Skew:</label>
                        <input type="range" id="walkSkew" value="0" min="-1" max="1" step="0.01" title="Adjust the skew for Walk arpeggio mode, affecting probability of steps.">
                        <span id="walkSkewValue" class="number-display">0</span>
                    </div>
                    <div class="slider-container" id="walkDistanceContainer" style="display: none;">
                        <label for="walkDistance">Walk Distance:</label>
                        <input type="range" id="walkDistance" value="0" min="0" max="1" step="0.01" title="Adjust the distance for Normal Walk arpeggio mode, affecting step size.">
                        <span id="walkDistanceValue" class="number-display">0</span>
                    </div>
                </div>

                <div class="slider-container" title="Percentage of clock division used for sub-arpeggiation of chords.">
                    <label for="subArpScale">Sub Arp Scale (%):</label>
                    <input type="range" id="subArpScale" value="0" min="0" max="100" step="1" title="Control the timing spread of notes within chords. 0% for no sub-arp, 100% to fill clock division.">
                    <span id="subArpScaleValue" class="number-display">0</span>
                </div>
                <div class="slider-container" title="Arpeggio mode for sub-arpeggiation of chords.">
                    <label for="subArpMode">Sub Arp Mode:</label>
                    <select id="subArpMode" title="Select the arpeggio mode for sub-arpeggiation within chords.">
                        <option value="up">Up</option>
                        <option value="down">Down</option>
                        <option value="random">Random</option>
                        <option value="converge">Converge</option>
                        <option value="diverge">Diverge</option>
                    </select>
                </div>

                <div class="slider-container" title="Synchronization mode for the arpeggiator.">
                    <label for="arpSyncMode">Arp Sync Mode:</label>
                    <select id="arpSyncMode" title="Choose the synchronization mode for starting and stopping the arpeggiator.">
                        <option value="free">Free Sync</option>
                        <option value="key" selected="selected">Key Sync</option>
                        <option value="transport">Transport Sync (Placeholder)</option>
                    </select>
                </div>

                <div class="slider-container" title="Number of octaves to expand held notes across.">
                    <label for="octaves">Octaves:</label>
                    <input type="range" id="octaves" value="1" min="1" max="4" step="1" title="Expand the range of arpeggiated notes by adding octaves above the held notes.">
                    <span id="octavesValue" class="number-display">1</span>
                </div>
                <div class="slider-container" title="Base velocity for arpeggiated notes.">
                    <label for="baseVelocity">Base Velocity:</label>
                    <input type="range" id="baseVelocity" value="96" min="1" max="127" step="1" title="Set the base velocity for arpeggiated notes. Velocity can be further modified by MPE or aftertouch.">
                    <span id="baseVelocityValue" class="number-display">96</span>
                </div>
                <div class="slider-container" title="Maximum velocity for arpeggiated notes.">
                    <label for="maxVelocity">Max Velocity:</label>
                    <input type="range" id="maxVelocity" value="127" min="1" max="127" step="1" title="Set the maximum velocity for arpeggiated notes. Used in conjunction with base velocity and pressure.">
                    <span id="maxVelocityValue" class="number-display">127</span>
                </div>
                <div class="slider-container" title="Gate length as a percentage of the clock division.">
                    <label for="gateLength">Gate Length (%):</label>
                    <input type="range" id="gateLength" value="50" min="1" max="150" step="1" title="Adjust the gate length of arpeggiated notes as a percentage of the clock division duration.">
                    <span id="gateLengthValue" class="number-display">50</span>
                </div>
                <div class="slider-container" title="Enable gate flex to extend note gates based on rhythm density.">
                    <input type="checkbox" id="enableGateFlex" title="Enable Gate Flex to make gates longer before rests.">
                    <label for="enableGateFlex" style="text-align: left; width: auto;">Enable Gate Flex</label>
                </div>
            </fieldset>
        </div>
    </div>

    <div class="playback-keyboard-container" title="Visual display of held and playing notes. Not interactive.">
        <div class="playback-keyboard" id="playbackKeyboardDisplay">
            <!-- Playback piano keys will be generated here by JavaScript -->
        </div>
    </div>

    <div class="playback-display" id="playbackDisplay" title="Displays the sequence of played notes and rhythms."></div>

    <button id="startButton" title="Start the arpeggiator." class="control-button">Start Arpeggiator</button>
    <button id="stopButton" disabled title="Stop the arpeggiator." class="control-button">Stop Arpeggiator</button>

    <script>
        /**
         * @fileoverview Euclidean MPE Arpeggiator Prototype
         * Implements a dual-layer Euclidean rhythm arpeggiator with MPE and MIDI support.
         * Features include customizable patterns and arp rhythms, various arpeggio modes,
         * tempo sync options, and octave expansion. MPE and aftertouch/velocity mapping added.
         * Gate Flex feature added.
         */

        // --- Utility Functions ---
        /**
         * Helper function to compare if two arrays are equal.
         * @param {array} arr1
         * @param {array} arr2
         * @returns {boolean}
         */
        function arraysAreEqual(arr1, arr2) {
            if (arr1.length !== arr2.length) return false;
            for (let i = 0; i < arr1.length; i++) {
                if (arr1[i] !== arr2[i]) return false;
            }
            return true;
        }

        // --- MIDI Variables ---
        let midiAccess = null;
        let midiOutput = null;
        let midiInput = null;
        let isSustainPedalPressed = false;
        let sustainedNotesMIDI = new Set();

        // --- Rhythm Event Constants ---
        const RHYTHM_BEAT = 'B';
        const RHYTHM_REST = 'R';
        const PATTERN_NOTE = 'N';
        const PATTERN_SKIP = 'S';

        // --- Note Arrays and Sets ---
        let rawHeldNotes = []; // Stores original held notes, before octave expansion
        let heldNotes = []; // Stores MIDI notes currently held, expanded by octave if needed, and unique
        let heldNotesUI = new Set(); // Stores notes held by UI interaction
        let heldNotesMIDI = new Set(); // Stores notes held by MIDI input
        let notePressures = new Map(); // Stores pressure values for each held MIDI note (for aftertouch/velocity)
        let noteMPEYAxis = new Map(); // Stores MPE Y Axis values
        let octaveExpandedNoteMap = new Map();
        let playedNoteOrder = []; // Stores notes in the order they were played

        // --- Rhythm Pattern Variables ---
        let patternRhythm = []; // Euclidean rhythm for note pattern (Note/Skip)
        let rhythm = []; // Euclidean rhythm for arpeggio rhythm (Beat/Rest)
        let rhythmGateMultipliers = []; // Array to store gate multipliers for rhythm
        let isPatternDisabled = false;
        let isRhythmDisabled = false;

        // --- Arpeggiator State Variables ---
        let arpRunning = false; // Arpeggiator play/stop state
        let arpInterval = null; // Interval for internal clock
        let currentNoteIndex = 0; // Index for current note in arpeggio
        let currentRhythmIndex = 0; // Index for current step in arp rhythm
        let currentPatternIndex = 0; // Index for current step in pattern
        let arpMode = 'up'; // Arpeggio mode (up, down, etc.)
        let arpSyncMode = 'key'; // Arpeggio sync mode (free, key, transport)
        let currentModeNoteList = []; // Array holding notes for the current arp mode
        let chordNValue = 2; // Default N value for ChordN mode

        // --- Walk Mode Parameters ---
        let walkSkew = 0; // Skew parameter for walk modes, default 0
        let walkDistance = 0; // Distance parameter for normal walk mode, default 0

        // --- Sub Arp ---
        let subArpScalePercentage = 0; // Default sub arp scale
        let subArpMode = 'up'; // Default sub arp mode

        // --- Gate Flex ---
        let isGateFlexEnabled = false; // Enable/disable gate flex

        // --- MPE and MIDI Channel Settings ---
        let isMPEEnabled = false;
        let mpeGlobalInputChannel = 'omni';
        let mpeInputVoiceChannels = 8;
        let mpeOutputMode = 'non-mpe';
        let mpeGlobalOutputChannel = '1';
        let mpeChannelNotes = new Array(16).fill(null); // Track notes per MPE channel

        // --- Tempo and Clock Variables ---
        let tempoSource = 'internal';
        let bpm = 120;
        let clockDivision = '1/4';
        let tickCounter = -1;
        let clockDivisionCounterMax = calculateClockDivisionCounterMax(clockDivision); // Ticks per step based on clock division
        let internalClockInterval = null;
        let clockDivisionDurationMs = 0; // Duration of one clock division in milliseconds
        const tempoBPMInput = document.getElementById('tempoBPM'); // Tempo BPM input element (now also display)

        // --- MIDI Clock Tick History ---
        const tickHistorySize = 24; // Store up to 24 ticks (one quarter note)
        let tickHistory = new Array(tickHistorySize).fill(0);
        let tickIndex = 0;
        let lastTickTime = 0;

        // --- Arpeggio Mode Specific State ---
        let shuffledNotesOrder = [];
        let stableShuffledOrder = [];
        let stableShuffleIndex = 0;
        let lastNotesToArp = [];

        // --- UI Elements and Display ---
        const playbackDisplayElem = document.getElementById('playbackDisplay');
        const maxPlaybackSteps = 20;
        let highlightedPianoKey = null;
        let highlightedPlaybackPianoKey = null; // For playback keyboard highlighting

        // --- Octave Expansion ---
        let octaveCount = 1;
        let baseVelocityValue = 96; // Default base velocity
        let maxVelocityValue = 127; // Default max velocity

        // --- Gate Length ---
        let gateLengthPercentage = 50; // Default gate length percentage
        let gateLengthValueDisplay = document.getElementById('gateLengthValue'); // Get display element

        // -- Miscellaneous constants --
        const defaultNotePressure = 0; // Pressure that new notes get initialized to
        const defaultMpeYAxis = 0; // MPE Y value that new notes get initialized to
        const notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];

        /**
         * Event listeners for UI controls.
         */
        const startButton = document.getElementById('startButton');
        const stopButton = document.getElementById('stopButton');

        startButton.addEventListener('click', startArpeggiator);
        stopButton.addEventListener('click', stopArpeggiator);

        document.getElementById('arpMode').addEventListener('change', function() {
            arpMode = this.value;
            const chordNControls = document.getElementById('chordNControls');
            const walkParamsControls = document.getElementById('walkParams');
            const walkDistanceContainer = document.getElementById('walkDistanceContainer');

            if (arpMode === 'chordN') {
                chordNControls.style.display = 'block';
                walkParamsControls.style.display = 'none';
            } else if (arpMode === 'normalWalk') {
                chordNControls.style.display = 'none';
                walkParamsControls.style.display = 'block';
                walkDistanceContainer.style.display = 'block';
            } else if (arpMode === 'walk') {
                chordNControls.style.display = 'none';
                walkParamsControls.style.display = 'block';
                walkDistanceContainer.style.display = 'none';
            } else {
                chordNControls.style.display = 'none';
                walkParamsControls.style.display = 'none';
            }
            updateArpeggiatorNoteListAndIndex();
        });
        document.getElementById('arpSyncMode').addEventListener('change', function() {
            arpSyncMode = this.value;
        });
        document.getElementById('enableMPE').addEventListener('change', function() {
            isMPEEnabled = this.checked;
        });
        document.getElementById('mpeGlobalInputChannel').addEventListener('change', function() {
            mpeGlobalInputChannel = this.value;
        });
        document.getElementById('mpeInputVoiceChannels').addEventListener('change', function() {
            mpeInputVoiceChannels = parseInt(this.value);
        });
        document.getElementById('mpeOutputMode').addEventListener('change', function() {
            mpeOutputMode = this.value;
        });
        document.getElementById('mpeGlobalOutputChannel').addEventListener('change', function() {
            mpeGlobalOutputChannel = this.value;
        });
        document.getElementById('octaves').addEventListener('input', function() {
            octaveCount = parseInt(this.value);
            document.getElementById('octavesValue').textContent = octaveCount;
            updateHeldNotesArrays();
        });
        document.getElementById('tempoSource').addEventListener('change', function() {
            tempoSource = this.value;
            if (tempoSource === 'internal') {
                setupInternalClock();
                updateTempoDisplay();
            } else {
                clearInterval(internalClockInterval);
                updateTempoDisplay('External MIDI Clock');
            }
        });
        tempoBPMInput.addEventListener('change', function() {
            bpm = parseInt(this.value);
            if (tempoSource === 'internal') {
                setupInternalClock();
                updateTempoDisplay();
            }
        });
        document.getElementById('clockDivision').addEventListener('change', function() {
            clockDivision = this.value;
            clockDivisionCounterMax = calculateClockDivisionCounterMax(clockDivision);
            if (tempoSource === 'internal') {
                setupInternalClock();
            }
        });
        document.getElementById('chordNValue').addEventListener('input', function() {
            chordNValue = parseInt(this.value);
            document.getElementById('chordNValueDisplay').textContent = chordNValue;
            updateModeNoteList();
        });
        document.getElementById('baseVelocity').addEventListener('input', function() {
            baseVelocityValue = parseInt(this.value);
            document.getElementById('baseVelocityValue').textContent = baseVelocityValue;
        });
        document.getElementById('maxVelocity').addEventListener('input', function() {
            maxVelocityValue = parseInt(this.value);
            document.getElementById('maxVelocityValue').textContent = maxVelocityValue;
        });
        document.getElementById('gateLength').addEventListener('input', function() {
            gateLengthPercentage = parseInt(this.value);
            document.getElementById('gateLengthValue').textContent = gateLengthPercentage;
        });
        document.getElementById('subArpScale').addEventListener('input', function() {
            subArpScalePercentage = parseInt(this.value);
            document.getElementById('subArpScaleValue').textContent = subArpScalePercentage;
        });
        document.getElementById('patternSteps').addEventListener('input', updateRhythmDisplays);
        document.getElementById('patternBeats').addEventListener('input', updateRhythmDisplays);
        document.getElementById('patternOffset').addEventListener('input', updateRhythmDisplays);
        document.getElementById('rhythmSteps').addEventListener('input', updateRhythmDisplays);
        document.getElementById('rhythmBeats').addEventListener('input', updateRhythmDisplays);
        document.getElementById('rhythmOffset').addEventListener('input', updateRhythmDisplays);
        document.getElementById('walkSkew').addEventListener('input', function() {
            walkSkew = parseFloat(this.value);
            document.getElementById('walkSkewValue').textContent = walkSkew.toFixed(2);
        });
        document.getElementById('walkDistance').addEventListener('input', function() {
            walkDistance = parseFloat(this.value);
            document.getElementById('walkDistanceValue').textContent = walkDistance.toFixed(2);
        });
        document.getElementById('chordNOrdering').addEventListener('change', function() {
            updateModeNoteList();
        });
        document.getElementById('subArpMode').addEventListener('change', function() {
            subArpMode = this.value;
        });
        document.getElementById('enablePattern').addEventListener('change', function() {
            isPatternDisabled = !this.checked;
            updateRhythmDisplays();
            updatePatternControlsState();
        });
        document.getElementById('enableRhythm').addEventListener('change', function() {
            isRhythmDisabled = !this.checked;
            updateRhythmDisplays();
            updateRhythmControlsState();
        });
        document.getElementById('enableGateFlex').addEventListener('change', function() {
            isGateFlexEnabled = this.checked;
        });

        // --- TAB SWITCHING ---
        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.dataset.tab;
                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));
                button.classList.add('active');
                document.getElementById(tabId).classList.add('active');
            });
        });

        /**
         * Updates the tempo display in the UI.
         * @param {string} [source] - Tempo source ('Internal' or 'External MIDI Clock').
         *                           Defaults to 'Internal' if tempoSource is 'internal', otherwise 'External MIDI Clock'.
         */
        function updateTempoDisplay(source) {
            if (!source) {
                source = tempoSource === 'internal' ? 'Internal' : 'External MIDI Clock';
            }
            tempoBPMInput.value = bpm;
            tempoBPMInput.title = `Tempo (BPM): ${source === 'Internal' ? 'Editable' : 'Controlled by external MIDI clock'}`;
            tempoBPMInput.readOnly = source !== 'Internal';
        }

        /**
         * Initializes WebMIDI and sets up MIDI input and output device selectors.
         */
        navigator.requestMIDIAccess()
            .then(onMIDISuccess, onMIDIFailure);

        /**
         * Handles successful MIDI access.
         * Populates MIDI input and output selectors and sets up default devices.
         * @param {MIDIAccess} midi - MIDI access object.
         */
        function onMIDISuccess(midi) {
            midiAccess = midi;
            document.getElementById('midiStatus').innerText = "MIDI Status: Connected";

            const inputSelect = document.getElementById('midiInputSelect');
            const outputSelect = document.getElementById('midiOutputSelect');

            // Populate MIDI input select
            midiAccess.inputs.forEach(input => {
                const option = document.createElement('option');
                option.value = input.id;
                option.text = input.name || 'MIDI Input ' + (inputSelect.options.length);
                inputSelect.appendChild(option);
            });

            // Populate MIDI output select
            midiAccess.outputs.forEach(output => {
                const option = document.createElement('option');
                option.value = output.id;
                option.text = output.name || 'MIDI Output ' + (outputSelect.options.length);
                outputSelect.appendChild(option);
            });

            // Select first input and output if available (skip "No input device selected" option)
            if (inputSelect.options.length > 1) {
                inputSelect.selectedIndex = 1;
                selectMidiInput(inputSelect.options[1].value);
            }

            if (outputSelect.options.length > 1) {
                outputSelect.selectedIndex = 1;
                selectMidiOutput(outputSelect.options[1].value);
            } else {
                document.getElementById('midiStatus').innerText += " No MIDI output device found.";
            }

            // Input device change listener
            inputSelect.addEventListener('change', function() {
                selectMidiInput(this.value);
            });

            // Output device change listener
            outputSelect.addEventListener('change', function() {
                selectMidiOutput(this.value);
            });
        }

        /**
         * Handles MIDI access failure.
         */
        function onMIDIFailure() {
            document.getElementById('midiStatus').innerText = "MIDI Status: MIDI access failed.";
        }

        /**
         * Selects a MIDI input device and attaches the MIDI message handler.
         * @param {string} inputId - ID of the MIDI input device.
         */
        function selectMidiInput(inputId) {
            if (midiInput) {
                midiInput.onmidimessage = null;
            }
            if (inputId) {
                midiInput = midiAccess.inputs.get(inputId);
                midiInput.onmidimessage = onMIDIMessage;
            } else {
                midiInput = null;
            }
        }

        /**
         * Selects a MIDI output device.
         * @param {string} outputId - ID of the MIDI output device.
         */
        function selectMidiOutput(outputId) {
            if (outputId) {
                midiOutput = midiAccess.outputs.get(outputId);
            } else {
                midiOutput = null;
            }
        }

        /**
         * Generates octave-expanded notes from raw held notes.
         * Ensures no note appears more than once in the expanded sequence.
         * @param {number[]} inputNotes - Array of raw MIDI notes.
         * @param {number} octaves - Number of octaves to expand.
         * @returns {number[]} - Array of unique, octave-expanded MIDI notes.
         */
        function generateOctaveExpandedNotes(inputNotes, octaves) {
            const expandedNotes = [];
            const seenNotes = new Set();
            octaveExpandedNoteMap.clear();
            for (let i = 0; i < octaves; i++) {
                for (const originalNote of inputNotes) {
                    const expandedNote = originalNote + (12 * i);
                    if (!seenNotes.has(expandedNote)) {
                        expandedNotes.push(expandedNote);
                        seenNotes.add(expandedNote);
                        octaveExpandedNoteMap.set(expandedNote, originalNote);
                    }
                }
            }
            return expandedNotes;
        }

        /**
         * Updates the arpeggiator's note list and index based on the current arp mode and held notes.
         * Called whenever held notes or arp mode changes to maintain continuity.
         */
        function updateArpeggiatorNoteListAndIndex() {
            const previousModeNoteList = [...currentModeNoteList];
            const previousNoteIndexVal = currentNoteIndex;

            const newModeNoteList = updateModeNoteList();

            if (previousModeNoteList.length > 0 && newModeNoteList.length > 0 && arpRunning) {
                if (['up', 'down', 'upDown', 'upDownInclusive', 'converge', 'diverge', 'convergeDiverge', 'convergeDivergeInclusive', 'walk', 'normalWalk', 'played'].includes(arpMode)) {
                    currentNoteIndex = findClosestNoteIndex(previousModeNoteList[previousNoteIndexVal % previousModeNoteList.length], previousModeNoteList, newModeNoteList, previousNoteIndexVal);
                } else {
                    currentNoteIndex = (currentNoteIndex % previousModeNoteList.length) % newModeNoteList.length;
                    if (!currentNoteIndex) currentNoteIndex = 0;
                }
            }
        }

        /**
         * Handles note on events from both UI and MIDI sources.
         * Updates held notes, UI, and starts arpeggiator in Key Sync mode.
         * @param {number} note - MIDI note number.
         * @param {string} source - Source of the note event ('ui' or 'midi').
         * @param {number} [channel] - MIDI channel of the note on message (only for MIDI source).
         */
        function noteOn(note, source = 'ui', channel = null) {
            addHeldNote(note, source, channel);
        }

        /**
         * Handles note off events from MIDI sources.
         * Updates held notes, UI, and stops arpeggiator in Key Sync mode if no notes are held.
         * @param {number} note - MIDI note number.
         * @param {string} source - Source of the note event ('ui' or 'midi').
         * @param {number} [channel] - MIDI channel of the note off message (only for MIDI source).
         */
        function noteOff(note, source = 'midi', channel = null) {
            removeHeldNote(note, source, channel);
        }

        /**
         * Adds a note to held notes, handling octave expansion and UI update.
         * @param {number} note - MIDI note number to add.
         * @param {string} source - Source of the note event ('ui' or 'midi').
         * @param {number} [channel] - MIDI channel (for MIDI source).
         */
        function addHeldNote(note, source = 'ui', channel = null) {
            const isUI = source === 'ui';
            const heldSet = isUI ? heldNotesUI : heldNotesMIDI;

            if (isUI) {
                if (!heldSet.has(note)) {
                    heldSet.add(note);
                    rawHeldNotes.push(note);
                    playedNoteOrder.push(note);
                } else {
                    heldSet.delete(note);
                    const indexToRemove = rawHeldNotes.indexOf(note);
                    if (indexToRemove > -1) {
                        rawHeldNotes.splice(indexToRemove, 1);
                        const playedIndexToRemove = playedNoteOrder.indexOf(note);
                        if (playedIndexToRemove > -1) {
                            playedNoteOrder.splice(playedIndexToRemove, 1);
                        }
                    }
                }
                updateHeldNotesArrays();
                updatePianoUIForNote(note, source);
            } else { // source === 'midi'
                if (!heldNotesMIDI.has(note)) {
                    heldNotesMIDI.add(note);
                    rawHeldNotes.push(note);
                    playedNoteOrder.push(note);
                }
                updateHeldNotesArrays();
                updatePianoUIForNote(note, 'midi');
                if (isMPEEnabled && channel !== null) {
                    mpeChannelNotes[channel] = note;
                }
            }

            notePressures.set(note, defaultNotePressure);
            noteMPEYAxis.set(note, defaultMpeYAxis);
            updatePlaybackKeyboardUI();

            if (arpSyncMode === 'key' && !arpRunning) {
                startArpeggiator();
            }
            updateArpeggiatorNoteListAndIndex();

            if (arpMode === 'shuffled' && arpRunning && shuffledNotesOrder.length > 0) {
                const insertionIndex = Math.floor(Math.random() * shuffledNotesOrder.length);
                shuffledNotesOrder.splice(insertionIndex, 0, note);
                if (insertionIndex <= currentNoteIndex) {
                    currentNoteIndex++;
                }
            } else if (arpMode === 'stableShuffled' && arpRunning && stableShuffledOrder.length > 0) {
                const insertionIndex = Math.floor(Math.random() * stableShuffledOrder.length);
                stableShuffledOrder.splice(insertionIndex, 0, note);
                if (insertionIndex <= stableShuffleIndex) {
                    stableShuffleIndex++;
                }
            } else if (arpMode === 'shuffled' && arpRunning && shuffledNotesOrder.length === 0) {
                shuffledNotesOrder.push(note);
            } else if (arpMode === 'stableShuffled' && arpRunning && stableShuffledOrder.length === 0) {
                stableShuffledOrder.push(note);
            }
        }

        /**
         * Removes a note from held notes, considering sustain pedal and UI update.
         * @param {number} note - MIDI note number to remove.
         * @param {string} source - Source of the note event ('ui' or 'midi').
         * @param {number} [channel] - MIDI channel (for MIDI source).
         */
        function removeHeldNote(note, source = 'midi', channel = null) {
            if (source === 'midi') {
                if (isSustainPedalPressed) {
                    sustainedNotesMIDI.add(note);
                    return;
                }
                heldNotesMIDI.delete(note);
                const indexToRemove = rawHeldNotes.indexOf(note);
                if (indexToRemove > -1) {
                    rawHeldNotes.splice(indexToRemove, 1);
                    const playedIndexToRemove = playedNoteOrder.indexOf(note);
                    if (playedIndexToRemove > -1) {
                        playedNoteOrder.splice(playedIndexToRemove, 1);
                    }
                }
                updateHeldNotesArrays();
                updatePianoUIForNote(note, 'midi');
                if (isMPEEnabled && channel !== null) {
                    mpeChannelNotes[channel] = null;
                }
            } else { // source === 'ui'
                heldNotesUI.delete(note);
                const indexToRemove = rawHeldNotes.indexOf(note);
                if (indexToRemove > -1) {
                    rawHeldNotes.splice(indexToRemove, 1);
                    const playedIndexToRemove = playedNoteOrder.indexOf(note);
                    if (playedIndexToRemove > -1) {
                        playedNoteOrder.splice(playedIndexToRemove, 1);
                    }
                }
                updateHeldNotesArrays();
                updatePianoUIForNote(note, 'ui');
            }

            notePressures.delete(note);
            noteMPEYAxis.delete(note);
            updatePlaybackKeyboardUI();

            if (arpSyncMode === 'key' && heldNotes.length === 0 && arpRunning) {
                stopArpeggiator();
            }
            updateArpeggiatorNoteListAndIndex();

            if (arpMode === 'shuffled' && arpRunning) {
                const noteIndex = shuffledNotesOrder.indexOf(note);
                if (noteIndex !== -1) {
                    shuffledNotesOrder.splice(noteIndex, 1);
                    if (noteIndex < currentNoteIndex && currentNoteIndex > 0) {
                        currentNoteIndex--;
                    } else if (currentNoteIndex >= shuffledNotesOrder.length && shuffledNotesOrder.length > 0) {
                        currentNoteIndex = shuffledNotesOrder.length - 1;
                    } else if (shuffledNotesOrder.length === 0) {
                        currentNoteIndex = 0;
                    }
                }
            } else if (arpMode === 'stableShuffled' && arpRunning) {
                const noteIndex = stableShuffledOrder.indexOf(note);
                if (noteIndex !== -1) {
                    stableShuffledOrder.splice(noteIndex, 1);
                    if (noteIndex < stableShuffleIndex && stableShuffleIndex > 0) {
                        stableShuffleIndex--;
                    } else if (stableShuffleIndex >= stableShuffledOrder.length && stableShuffleIndex.length > 0) {
                        stableShuffleIndex = stableShuffleIndex.length - 1;
                    } else if (stableShuffleIndex.length === 0) {
                        stableShuffleIndex = 0;
                    }
                }
            }
        }

        /**
         * Updates the 'heldNotes' array from 'rawHeldNotes' based on octave count.
         * Also updates playback keyboard UI and mode note list.
         */
        function updateHeldNotesArrays() {
            heldNotes = generateOctaveExpandedNotes(rawHeldNotes, octaveCount);
            updatePlaybackKeyboardUI();
            updateModeNoteList();
        }

        /**
         * Updates the piano keyboard UI for a single note.
         * @param {number} note - MIDI note number.
         * @param {string|null} source - Source of the hold ('ui', 'midi', or null to reset).
         */
        function updatePianoUIForNote(note, source) {
            updatePianoKeyboardUI(note, source);
        }

        /**
         * Converts a MIDI note number to a note name (e.g., "C4").
         * @param {number} note - MIDI note number.
         * @returns {string} - Note name with octave.
         */
        function midiNoteToName(note) {
            const notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
            const octave = Math.floor(note / 12) - 1;
            const noteName = notes[note % 12];
            return noteName + octave;
        }

        /**
         * Generates a Euclidean rhythm pattern.
         * @param {number} steps - Number of steps in the rhythm.
         * @param {number} beats - Number of beats in the rhythm.
         * @param {number} offset - Offset/rotation of the rhythm.
         * @param {string} beatEvent - Event character for beats.
         * @param {string} restEvent - Event character for rests.
         * @param {boolean} [isDisabled=false] - If true, rhythm is disabled and all steps are beatEvent.
         * @returns {string[]} - Array representing the Euclidean rhythm pattern.
         */
        function generateEuclideanRhythm(steps, beats, offset, beatEvent, restEvent, isDisabled = false) {
            if (isDisabled) {
                return new Array(steps).fill(beatEvent);
            }
            const rhythm = new Array(steps).fill(restEvent);
            let count = 0;
            for (let i = 0; i < steps; i++) {
                if ((count * steps) < (beats * (i + 1))) {
                    rhythm[i] = beatEvent;
                    count++;
                }
            }
            const positiveOffset = offset >= 0 ? offset : steps + offset;
            for (let i = 0; i < positiveOffset; i++) {
                rhythm.unshift(rhythm.pop());
            }
            return rhythm;
        }

        /**
         * Generates an array of gate multipliers based on the rhythm array.
         * @param {string[]} rhythmArray - Array of rhythm events ('B' for beat, 'R' for rest).
         * @returns {number[]} - Array of gate multipliers, 0 for rests, steps to next beat for beats.
         */
        function generateRhythmGateMultipliers(rhythmArray) {
            const multipliers = new Array(rhythmArray.length).fill(0);
            for (let i = 0; i < rhythmArray.length; i++) {
                if (rhythmArray[i] === RHYTHM_BEAT) {
                    let stepsToNextBeat = 1;
                    let currentIndex = (i + 1) % rhythmArray.length;
                    while (currentIndex !== i && rhythmArray[currentIndex] !== RHYTHM_BEAT) {
                        stepsToNextBeat++;
                        currentIndex = (currentIndex + 1) % rhythmArray.length;
                    }
                    if (stepsToNextBeat > rhythmArray.length) stepsToNextBeat = 1; // Failsafe
                    multipliers[i] = stepsToNextBeat;
                }
            }
            return multipliers;
        }

        /**
         * Updates both pattern and arpeggio rhythm displays based on slider values and enabled states.
         */
        function updateRhythmDisplays() {
            const patternStepsSlider = document.getElementById('patternSteps');
            const patternBeatsSlider = document.getElementById('patternBeats');
            const patternOffsetSlider = document.getElementById('patternOffset');
            const rhythmStepsSlider = document.getElementById('rhythmSteps');
            const rhythmBeatsSlider = document.getElementById('rhythmBeats');
            const rhythmOffsetSlider = document.getElementById('rhythmOffset');

            const patternSteps = parseInt(patternStepsSlider.value);
            const patternBeats = parseInt(patternBeatsSlider.value);
            const patternOffset = parseInt(patternOffsetSlider.value);
            patternRhythm = generateEuclideanRhythm(patternSteps, patternBeats, patternOffset, PATTERN_NOTE, PATTERN_SKIP, isPatternDisabled);
            displayRhythm(patternRhythm, 'patternDisplay', isPatternDisabled);
            document.getElementById('patternStepsValue').textContent = patternSteps;
            document.getElementById('patternBeatsValue').textContent = patternBeats;
            document.getElementById('patternOffsetValue').textContent = patternOffset;

            const rhythmSteps = parseInt(rhythmStepsSlider.value);
            const rhythmBeats = parseInt(rhythmBeatsSlider.value);
            const rhythmOffset = parseInt(rhythmOffsetSlider.value);
            rhythm = generateEuclideanRhythm(rhythmSteps, rhythmBeats, rhythmOffset, RHYTHM_BEAT, RHYTHM_REST, isRhythmDisabled);
            displayRhythm(rhythm, 'rhythmDisplay', isRhythmDisabled);
            document.getElementById('rhythmStepsValue').textContent = rhythmSteps;
            document.getElementById('rhythmBeatsValue').textContent = rhythmBeats;
            document.getElementById('rhythmOffsetValue').textContent = rhythmOffset;

            rhythmGateMultipliers = generateRhythmGateMultipliers(rhythm);

            patternBeatsSlider.max = patternSteps;
            rhythmBeatsSlider.max = rhythmSteps;

            const patternOffsetMax = Math.floor(patternSteps / 2);
            patternOffsetSlider.min = -patternOffsetMax;
            patternOffsetSlider.max = patternOffsetMax;

            const rhythmOffsetMax = Math.floor(rhythmSteps / 2);
            rhythmOffsetSlider.min = -rhythmOffsetMax;
            rhythmOffsetSlider.max = rhythmOffsetMax;

            resetRhythmIndex();
            resetPatternIndex();
        }

        /**
         * Updates the enabled/disabled state of pattern rhythm controls based on `isPatternDisabled`.
         */
        function updatePatternControlsState() {
            const patternStepsSlider = document.getElementById('patternSteps');
            const patternBeatsSlider = document.getElementById('patternBeats');
            const patternOffsetSlider = document.getElementById('patternOffset');

            patternStepsSlider.disabled = isPatternDisabled;
            patternBeatsSlider.disabled = isPatternDisabled;
            patternOffsetSlider.disabled = isPatternDisabled;
        }

        /**
         * Updates the enabled/disabled state of arpeggio rhythm controls based on `isRhythmDisabled`.
         */
        function updateRhythmControlsState() {
            const rhythmStepsSlider = document.getElementById('rhythmSteps');
            const rhythmBeatsSlider = document.getElementById('rhythmBeats');
            const rhythmOffsetSlider = document.getElementById('rhythmOffset');

            rhythmStepsSlider.disabled = isRhythmDisabled;
            rhythmBeatsSlider.disabled = isRhythmDisabled;
            rhythmOffsetSlider.disabled = isRhythmDisabled;
        }

        /**
         * Displays a rhythm pattern in the UI.
         * @param {string[]} rhythmArray - Array of rhythm events.
         * @param {string} displayElementId - ID of the HTML element to display the rhythm in.
         * @param {boolean} isDisabled - If true, apply disabled styling.
         */
        function displayRhythm(rhythmArray, displayElementId, isDisabled) {
            const displayElement = document.getElementById(displayElementId);
            displayElement.innerHTML = '';
            rhythmArray.forEach((event, index) => {
                const stepElement = document.createElement('div');
                stepElement.classList.add('rhythm-step');
                stepElement.innerText = event;
                stepElement.id = `${displayElementId}-step-${index}`;
                if (event === RHYTHM_BEAT) stepElement.classList.add('beat');
                else if (event === RHYTHM_REST) stepElement.classList.add('rest');
                else if (event === PATTERN_SKIP) stepElement.classList.add('skip');
                else if (event === PATTERN_NOTE) stepElement.classList.add('note');
                if (isDisabled) stepElement.classList.add('disabled-step');
                displayElement.appendChild(stepElement);
            });
        }

        /**
         * --- Arpeggio Mode Note List Generators ---
         * These functions generate the ordered list of notes based on the selected arpeggio mode.
         */

        /**
         * Generates an alternating variant of a note list (e.g., for up/down modes).
         * @param {number[]} notes - Base note list.
         * @returns {number[]} - Notes transformed to an alternating sequence.
         */
        function generateAlternatingVariant(notes) {
            return [...notes, ...notes.reverse().slice(1, -1)];
        }

        /**
         * Generates an inclusive alternating variant of a note list (e.g., for up/down inclusive modes).
         * @param {number[]} notes - Base note list.
         * @returns {number[]} - Notes transformed to an inclusive alternating sequence.
         */
        function generateInclusiveAlternatingVariant(notes) {
            return [...notes, ...notes.reverse()];
        }

        /**
         * Generates a note list in ascending order.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes in ascending order.
         */
        function generateUpNoteList(notes) {
            return [...notes].sort((a, b) => a - b);
        }

        /**
         * Generates a note list in descending order.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes in descending order.
         */
        function generateDownNoteList(notes) {
            return [...notes].sort((a, b) => b - a);
        }

        /**
         * Generates an up-down note list, excluding крайние notes in descent.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes in up-down sequence, excluding крайние notes in descent.
         */
        function generateUpDownNoteList(notes) {
            return generateAlternatingVariant(generateUpNoteList(notes));
        }

        /**
         * Generates an up-down inclusive note list, including крайние notes in descent.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes in up-down sequence, including крайние notes in descent.
         */
        function generateUpDownInclusiveNoteList(notes) {
            return generateInclusiveAlternatingVariant(generateUpNoteList(notes));
        }

        /**
         * Generates a note list converging from outer to inner notes.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes converging from outer to inner.
         */
        function generateConvergeNoteList(notes) {
            if (notes.length <= 1) return [...notes];
            const convergeList = [];
            let start = 0;
            let end = notes.length - 1;
            while (start <= end) {
                convergeList.push(notes[start]);
                if (start !== end) {
                    convergeList.push(notes[end]);
                }
                start++;
                end--;
            }
            return convergeList;
        }

        /**
         * Generates a note list diverging from inner to outer notes.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes diverging from inner to outer.
         */
        function generateDivergeNoteList(notes) {
            if (notes.length <= 1) return [...notes];
            const divergeList = [];
            let start = Math.floor((notes.length - 1) / 2);
            let end = Math.ceil((notes.length - 1) / 2);
            while (start >= 0 && end < notes.length) {
                divergeList.push(notes[start]);
                if (start !== end) {
                    divergeList.push(notes[end]);
                }
                start--;
                end++;
            }
            return divergeList;
        }

        /**
         * Generates a converge-diverge note list, excluding repeated end notes.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes in converge-diverge sequence, excluding repeated end notes.
         */
        function generateConvergeDivergeNoteList(notes) {
            return generateAlternatingVariant(generateConvergeNoteList(notes));
        }

        /**
         * Generates a converge-diverge inclusive note list, including repeated end notes.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes in converge-diverge sequence, including repeated end notes.
         */
        function generateConvergeDivergeInclusiveNoteList(notes) {
            return generateInclusiveAlternatingVariant(generateConvergeNoteList(notes));
        }

        /**
         * Generates a note list in the order notes were played/held.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes in the order they were played/held.
         */
        function generatePlayedNoteList(notes) {
            return [...notes];
        }

        /**
         * Generates an empty note list for random mode (note selection happens in arpStep).
         * @param {number[]} notes - Input notes (not used in random mode list generation).
         * @returns {number[]} - Empty array.
         */
        function generateRandomNoteList(notes) {
            return [];
        }

        /**
         * Generates a shuffled note list, shuffling notes randomly each time.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Notes shuffled randomly.
         */
        function generateShuffledNoteList(notes) {
            return [...notes].sort(() => Math.random() - 0.5);
        }

        /**
         * Generates a stable shuffled note list, maintaining the same shuffled order.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Returns the stable shuffled note order.
         */
        function generateStableShuffledNoteList(notes) {
            return stableShuffledOrder;
        }

        /**
         * Generates a chord note list, including all held notes as a chord.
         * @param {number[]} notes - Input notes.
         * @returns {number[]} - Returns all held notes as a chord.
         */
        function generateChordNoteList(notes) {
            return [...notes];
        }

        /**
         * Generates a list of chord combinations from held notes for ChordN mode.
         * @param {number[]} notes - Held MIDI notes.
         * @param {number} n - Number of notes per chord in ChordN.
         * @param {string} [orderingMode='up'] - Optional arpeggio mode to order the chord combinations (e.g., 'up', 'down', 'converge'). Defaults to 'up'.
         * @returns {number[][]} - List of chord combinations, potentially ordered.
         */
        function generateChordNNoteList(notes, n, orderingMode = 'up') {
            if (notes.length === 0 || n <= 0) return [];
            n = Math.min(n, notes.length);

            const combinations = [];

            function combine(currentCombination, startIndex) {
                if (currentCombination.length === n) {
                    combinations.push([...currentCombination]);
                    return;
                }
                for (let i = startIndex; i < notes.length; i++) {
                    currentCombination.push(notes[i]);
                    combine(currentCombination, i + 1);
                    currentCombination.pop();
                }
            }
            combine([], 0);

            let orderedCombinations = combinations;
            switch (orderingMode) {
                case 'up':
                    break;
                case 'down':
                    orderedCombinations = [...combinations].reverse();
                    break;
                case 'upDown':
                    orderedCombinations = generateAlternatingVariantCombinations(combinations);
                    break;
                case 'upDownInclusive':
                    orderedCombinations = generateInclusiveAlternatingVariantCombinations(combinations);
                    break;
                case 'converge':
                    orderedCombinations = generateConvergeCombinations(combinations);
                    break;
                case 'diverge':
                    orderedCombinations = generateDivergeCombinations(combinations);
                    break;
                default:
                    break;
            }

            return orderedCombinations;
        }

        /**
         * Generates an alternating variant of chord combinations (e.g., for up/down ChordN ordering).
         * @param {number[][]} combinations - Base chord combinations list.
         * @returns {number[][]} - Chord combinations transformed to an alternating sequence.
         */
        function generateAlternatingVariantCombinations(combinations) {
            return [...combinations, ...[...combinations].reverse().slice(1, -1)];
        }

        /**
         * Generates an inclusive alternating variant of chord combinations (e.g., for up/down inclusive ChordN ordering).
         * @param {number[][]} combinations - Base chord combinations list.
         * @returns {number[][]} - Chord combinations transformed to an inclusive alternating sequence.
         */
        function generateInclusiveAlternatingVariantCombinations(combinations) {
            return [...combinations, ...[...combinations].reverse()];
        }

        /**
         * Generates chord combinations converging from outer to inner.
         * @param {number[][]} combinations - Base chord combinations list.
         * @returns {number[][]} - Chord combinations converging from outer to inner.
         */
        function generateConvergeCombinations(combinations) {
            if (combinations.length <= 1) return [...combinations];
            const convergeList = [];
            let start = 0;
            let end = combinations.length - 1;
            while (start <= end) {
                convergeList.push(combinations[start]);
                if (start !== end) {
                    convergeList.push(combinations[end]);
                }
                start++;
                end--;
            }
            return convergeList;
        }

        /**
         * Generates chord combinations diverging from inner to outer.
         * @param {number[][]} combinations - Base chord combinations list.
         * @returns {number[][]} - Chord combinations diverging from inner to outer.
         */
        function generateDivergeCombinations(combinations) {
            if (combinations.length <= 1) return [...combinations];
            const divergeList = [];
            let start = Math.floor((combinations.length - 1) / 2);
            let end = Math.ceil((combinations.length - 1) / 2);
            while (start >= 0 && end < combinations.length) {
                divergeList.push(combinations[start]);
                if (start !== end) {
                    divergeList.push(combinations[end]);
                }
                start--;
                end++;
            }
            return divergeList;
        }

        /**
         * Updates the currentModeNoteList based on the selected arpeggio mode and held notes.
         * @returns {number[]} - The newly generated mode note list.
         */
        function updateModeNoteList() {
            let notesToArp = heldNotes.length > 0 ? heldNotes : [];
            switch (arpMode) {
                case 'up':
                    currentModeNoteList = generateUpNoteList(notesToArp);
                    break;
                case 'down':
                    currentModeNoteList = generateDownNoteList(notesToArp);
                    break;
                case 'upDown':
                    currentModeNoteList = generateUpDownNoteList(notesToArp);
                    break;
                case 'upDownInclusive':
                    currentModeNoteList = generateUpDownInclusiveNoteList(notesToArp);
                    break;
                case 'converge':
                    currentModeNoteList = generateConvergeNoteList(notesToArp);
                    break;
                case 'diverge':
                    currentModeNoteList = generateDivergeNoteList(notesToArp);
                    break;
                case 'convergeDiverge':
                    currentModeNoteList = generateConvergeDivergeNoteList(notesToArp);
                    break;
                case 'convergeDivergeInclusive':
                    currentModeNoteList = generateConvergeDivergeInclusiveNoteList(notesToArp);
                    break;
                case 'played':
                    currentModeNoteList = generatePlayedNoteList(heldNotes);
                    break;
                case 'random':
                    currentModeNoteList = generateRandomNoteList(notesToArp);
                    break;
                case 'shuffled':
                    currentModeNoteList = generateShuffledNoteList(notesToArp);
                    break;
                case 'stableShuffled':
                    currentModeNoteList = generateStableShuffledNoteList(notesToArp);
                    break;
                case 'chord':
                    currentModeNoteList = generateChordNoteList(notesToArp);
                    break;
                case 'chordN':
                    const chordNOrderingMode = document.getElementById('chordNOrdering').value;
                    currentModeNoteList = generateChordNNoteList(notesToArp, chordNValue, chordNOrderingMode);
                    break;
                case 'walk':
                    currentModeNoteList = generateUpNoteList(notesToArp);
                    break;
                case 'normalWalk':
                    currentModeNoteList = generateUpNoteList(notesToArp);
                    break;
                default:
                    currentModeNoteList = generateUpNoteList(notesToArp);
                    break;
            }
            return currentModeNoteList;
        }

        /**
         * Finds the closest note index in the new note list to the previous note, for continuity.
         * Implements fallback to the 'next' note if the 'current' note is not found.
         * @param {number} previousNote - The note that was playing at the current arp index in the old list.
         * @param {number[]} oldNoteList - The previous mode note list.
         * @param {number[]} newNoteList - The newly generated mode note list.
         * @param {number} previousIndex - The previous arpeggio note index.
         * @returns {number} - The adjusted arpeggio note index in the new note list.
         */
        function findClosestNoteIndex(previousNote, oldNoteList, newNoteList, previousIndex) {
            if (newNoteList.length === 0) return 0;

            let foundIndex = -1;
            let minDistance = Infinity;
            let currentNoteFound = false;

            for (let i = 0; i < newNoteList.length; i++) {
                if (newNoteList[i] === previousNote) {
                    currentNoteFound = true;
                    const distance = Math.min(Math.abs(i - previousIndex), newNoteList.length - Math.abs(i - previousIndex));
                    if (distance < minDistance) {
                        minDistance = distance;
                        foundIndex = i;
                    }
                }
            }

            if (currentNoteFound) {
                return foundIndex;
            }

            let nextNote = oldNoteList[(previousIndex + 1) % oldNoteList.length];
            if (oldNoteList.length === 0) nextNote = -1;

            if (nextNote !== -1) {
                minDistance = Infinity;
                foundIndex = -1;
                for (let i = 0; i < newNoteList.length; i++) {
                    if (newNoteList[i] === nextNote) {
                        const distance = Math.min(Math.abs(i - previousIndex), newNoteList.length - Math.abs(i - previousIndex));
                        if (distance < minDistance) {
                            minDistance = distance;
                            foundIndex = i;
                        }
                    }
                }
                if (foundIndex !== -1) {
                    return foundIndex;
                }
            }
            if (previousIndex) {
                return (previousIndex % oldNoteList.length) % newNoteList.length;
            } else {
                return 0;
            }
        }

        /**
         * Advances the arpeggio rhythm index by a specified number of steps (default 1).
         * @param {number} [steps=1] - Number of steps to advance.
         */
        function advanceRhythmIndex(steps = 1) {
            currentRhythmIndex = (currentRhythmIndex + steps) % rhythm.length;
        }

        /**
         * Resets the arpeggio rhythm index to 0.
         */
        function resetRhythmIndex() {
            currentRhythmIndex = 0;
        }

        /**
         * Advances the pattern index by a specified number of steps (default 1).
         * @param {number} [steps=1] - Number of steps to advance.
         */
        function advancePatternIndex(steps = 1) {
            currentPatternIndex = (currentPatternIndex + steps) % patternRhythm.length;
        }

        /**
         * Resets the pattern index to 0.
         */
        function resetPatternIndex() {
            currentPatternIndex = 0;
        }

        /**
         * Calculates the number of MIDI ticks per arpeggiator step based on the clock division.
         * Assumes 24 ticks per quarter note (PPQN).
         * @param {string} division - Clock division value (e.g., '1/4', '1/8T').
         * @returns {number} - Number of ticks per step.
         */
        function calculateClockDivisionCounterMax(division) {
            switch (division) {
                case '1/1':
                    return 96;
                case '1/2':
                    return 48;
                case '1/4':
                    return 24;
                case '1/8':
                    return 12;
                case '1/16':
                    return 6;
                case '1/32':
                    return 3;
                case '1/2T':
                    return 32;
                case '1/4T':
                    return 16;
                case '1/8T':
                    return 8;
                case '1/16T':
                    return 4;
                case '1/32T':
                    return 2;
                default:
                    return 24; // Default to 1/4
            }
        }

        /**
         * Calculates the gate duration in milliseconds based on clock division, gate length percentage, and optional gate multiplier.
         * @param {number} clockDivisionDurationMs - Duration of one clock division in milliseconds.
         * @param {number} gateLengthPercentage - Gate length as a percentage of clock division.
         * @param {number} [gateMultiplier=1] - Optional multiplier for gate length (e.g., for gate flex).
         * @returns {number} - Gate duration in milliseconds.
         */
        function calculateGateDuration(clockDivisionDurationMs, gateLengthPercentage, gateMultiplier = 1) {
            return (clockDivisionDurationMs * gateLengthPercentage * gateMultiplier) / 100;
        }

        /**
         * Sets up the internal clock for tempo and arpeggiation timing.
         * Clears any existing interval, calculates interval in milliseconds, and starts a new interval.
         */
        function setupInternalClock() {
            clearInterval(internalClockInterval);
            const intervalMs = 60000 / (bpm * 24); // Milliseconds per tick (24 PPQN)
            internalClockInterval = setInterval(tick, intervalMs);
            clockDivisionCounterMax = calculateClockDivisionCounterMax(clockDivision);
            tickCounter = -1;
            clockDivisionDurationMs = intervalMs * clockDivisionCounterMax;
            updateTempoDisplay();
            console.log(`Internal clock setup: BPM=${bpm}, Division=${clockDivision}, Interval=${intervalMs.toFixed(2)}ms, Ticks per step=${clockDivisionCounterMax}, Clock Division Duration=${clockDivisionDurationMs.toFixed(2)}ms`);
        }

        /**
         * Starts the arpeggiator. Initializes rhythms, note lists, and clock based on tempo source.
         * If already running, this function does nothing.
         */
        function startArpeggiator() {
            if (arpRunning) return;

            let notesToArp = heldNotes.length > 0 ? heldNotes : [];
            updateModeNoteList();

            if (!arraysAreEqual(notesToArp, lastNotesToArp)) {
                stableShuffledOrder = [...notesToArp].sort(() => Math.random() - 0.5);
                lastNotesToArp = [...notesToArp];
                stableShuffleIndex = 0;
            }

            shuffledNotesOrder = [...notesToArp].sort(() => Math.random() - 0.5);

            arpRunning = true;
            startButton.disabled = true;
            stopButton.disabled = false;
            startButton.classList.add('playing');
            stopButton.classList.remove('playing');
            updateRhythmDisplays();
            resetRhythmIndex();
            resetPatternIndex();
            currentNoteIndex = 0;

            if ((arpMode === 'walk' || arpMode === 'normalWalk') && currentModeNoteList.length > 0) {
                currentNoteIndex = Math.floor(currentModeNoteList.length / 2);
            }

            playbackDisplayElem.innerHTML = '';

            if (tempoSource === 'internal') {
                setupInternalClock();
            } else {
                clockDivisionCounterMax = calculateClockDivisionCounterMax(clockDivision);
                tickCounter = -1;
                updateTempoDisplay('External MIDI Clock');
                console.log(`External clock mode active, division=${clockDivision}, ticksPerStep=${clockDivisionCounterMax}`);
            }
        }

        /**
         * Stops the arpeggiator. Clears intervals and UI states.
         * If not running, this function does nothing.
         */
        function stopArpeggiator() {
            if (!arpRunning) return;
            arpRunning = false;
            if (tempoSource === 'internal') {
                clearInterval(internalClockInterval);
            }
            startButton.disabled = false;
            stopButton.disabled = true;
            stopButton.classList.add('playing');
            startButton.classList.remove('playing');
            allNotesOff();
            unhighlightCurrentStep();
            unhighlightPlaybackPianoKeys();
        }

        /**
         * Called on each clock tick (internal or external).
         * Increments tick counter and calls arpStep when enough ticks have accumulated for the current clock division.
         */
        function tick() {
            tickCounter++;
            if (tickCounter % clockDivisionCounterMax === 0) {
                arpStep();
            }
        }

        /**
         * Handles MIDI clock tick messages (0xF8).
         */
        function handleMIDITick() {
            if (tempoSource === 'external') {
                const now = performance.now();
                tickHistory[tickIndex % tickHistorySize] = now;
                tickIndex++;

                if (tickIndex >= tickHistorySize) {
                    let intervalSum = 0;
                    for (let i = 1; i < tickHistorySize; i++) {
                        intervalSum += tickHistory[i] - tickHistory[i - 1];
                    }
                    const averageInterval = intervalSum / (tickHistorySize - 1);
                    if (averageInterval > 0) {
                        clockDivisionDurationMs = averageInterval * clockDivisionCounterMax;
                        bpm = Math.round(60000 / (averageInterval * 24));
                        updateTempoDisplay();
                    }
                } else if (tickIndex > 1) {
                    clockDivisionDurationMs = (now - lastTickTime) * clockDivisionCounterMax;
                    bpm = Math.round(60000 / ((now - lastTickTime) * 24));
                    updateTempoDisplay();
                }
                lastTickTime = now;
                tick();
            }
        }

        /**
         * Handles incoming MIDI messages. Processes note on/off, MIDI clock messages, and aftertouch/pressure.
         * @param {MIDIMessageEvent} message - MIDI message event.
         */
        function onMIDIMessage(message) {
            const command = message.data[0];
            const commandHiBits = (command & 0xF0) >> 4;
            const commandLoBits = command & 0x0F;
            const byte1 = message.data.length > 1 ? message.data[1] : 0;
            const byte2 = message.data.length > 2 ? message.data[2] : 0;

            if (command === 0xF8) { // MIDI Clock Tick
                handleMIDITick();
                return;
            }

            let processMessage = false;

            if (isMPEEnabled) {
                const channel = commandLoBits;
                const globalChannel = parseInt(mpeGlobalInputChannel);
                const voiceChannelCount = mpeInputVoiceChannels;
                if (mpeGlobalInputChannel === 'omni' || (channel >= globalChannel && channel < globalChannel + voiceChannelCount)) {
                    processMessage = true;
                }
            } else {
                processMessage = true;
            }

            if (processMessage) {
                if (commandHiBits === 0x9) { // Note On
                    const channel = commandLoBits;
                    const note = byte1;
                    const velocity = byte2;
                    if (velocity > 0) {
                        noteOn(note, 'midi', channel);
                    } else {
                        noteOff(note, 'midi', channel);
                    }
                } else if (commandHiBits === 0x8) { // Note Off
                    const channel = commandLoBits;
                    const note = byte1;
                    noteOff(note, 'midi', channel);
                } else if (commandHiBits === 0xA) { // Polyphonic Aftertouch
                    const note = byte1;
                    const pressure = byte2;
                    if (notePressures.has(note)) {
                        notePressures.set(note, pressure);
                    }
                } else if (commandHiBits == 0xB) { // MIDI CC
                    const channel = commandLoBits;
                    const ccNumber = byte1;
                    const ccValue = byte2;

                    if (ccNumber === 64) { // Sustain Pedal
                        if (ccValue >= 64) { // Pedal Down
                            isSustainPedalPressed = true;
                        } else { // Pedal Up
                            isSustainPedalPressed = false;
                            let notesToRelease = [...sustainedNotesMIDI];
                            sustainedNotesMIDI.clear();
                            notesToRelease.forEach(note => {
                                removeHeldNote(note, 'midi');
                            });
                        }
                        return;
                    }

                    const channelNote = mpeChannelNotes[channel];
                    if (isMPEEnabled && ccNumber == 74) {
                        if (channelNote !== null && noteMPEYAxis.has(channelNote)) {
                            noteMPEYAxis.set(channelNote, ccValue);
                        }
                    }
                } else if (commandHiBits === 0xD) { // Channel Pressure
                    const channel = commandLoBits;
                    const pressure = byte1;
                    if (isMPEEnabled) {
                        const channelNote = mpeChannelNotes[channel];
                        if (channelNote !== null && notePressures.has(channelNote)) {
                            notePressures.set(channelNote, pressure);
                        }
                    } else { // Non-MPE Channel Pressure - Apply to all held MIDI notes
                        heldNotesMIDI.forEach(heldNote => {
                            if (notePressures.has(heldNote)) {
                                notePressures.set(heldNote, pressure);
                            }
                        });
                    }
                }
            }
        }

        /**
         * Executes a single arpeggiator step. Determines note to play based on rhythms, patterns and arpeggio mode.
         * Called by the clock tick.
         */
        function arpStep() {
            if (!arpRunning) {
                stopArpeggiator();
                return;
            }

            unhighlightCurrentStep();
            unhighlightPlaybackPianoKeys();

            let notesToArp = heldNotes.length > 0 ? heldNotes : [];
            if (arpSyncMode === 'free' && notesToArp.length === 0) {
                advanceRhythmIndex();
                advancePatternIndex();
                updatePlaybackDisplay('rest', null);
                highlightCurrentStep('rest', null);
                return;
            }

            if (arpMode === 'shuffled') {
                if (currentNoteIndex % notesToArp.length === 0) {
                    currentModeNoteList = generateShuffledNoteList(notesToArp);
                }
            } else if (arpMode === 'stableShuffled' && !arraysAreEqual(notesToArp, lastNotesToArp)) {
                stableShuffledOrder = [...notesToArp].sort(() => Math.random() - 0.5);
                stableShuffleIndex = 0;
                lastNotesToArp = [...notesToArp];
                currentModeNoteList = generateStableShuffledNoteList(notesToArp);
            }

            if (notesToArp.length === 0 && arpSyncMode !== 'free') {
                stopArpeggiator();
                return;
            } else if (notesToArp.length === 0 && arpSyncMode === 'free') {
                return;
            }

            let noteForStep = '';
            let stepType = null;

            const currentRhythmEvent = rhythm[currentRhythmIndex];
            const patternEventActive = !isPatternDisabled;
            const rhythmEventActive = !isRhythmDisabled;

            if (rhythmEventActive && currentRhythmEvent === RHYTHM_BEAT || !rhythmEventActive) {
                let patternEventProcessed = false;
                while (!patternEventProcessed) {
                    const currentPatternEvent = patternRhythm[currentPatternIndex];
                    const patternStepType = patternEventActive ? currentPatternEvent : PATTERN_NOTE;

                    if (patternStepType === PATTERN_NOTE) {
                        if (arpMode === 'chord' || arpMode === 'chordN') {
                            if (currentModeNoteList.length > 0) {
                                let chordToPlay = [];
                                if (arpMode === 'chordN') {
                                    if (currentModeNoteList) {
                                        chordToPlay = currentModeNoteList[currentNoteIndex % currentModeNoteList.length];
                                        highlightPianoKeys(chordToPlay);
                                        highlightPlaybackPianoKeys(chordToPlay);
                                    }
                                } else { // arpMode === 'chord'
                                    chordToPlay = currentModeNoteList;
                                    highlightPianoKeys(chordToPlay);
                                    highlightPlaybackPianoKeys(chordToPlay);
                                }
                                const selectedSubArpMode = document.getElementById('subArpMode').value;
                                playNotes(chordToPlay, selectedSubArpMode);
                                advancePatternIndex();
                                stepType = 'note';
                                highlightCurrentStep('note', null, true);
                                patternEventProcessed = true;
                            } else {
                                stepType = 'rest';
                                patternEventProcessed = true;
                                highlightCurrentStep('rest', null);
                            }
                        } else if (currentModeNoteList.length > 0 && arpMode !== 'random') {
                            noteForStep = currentModeNoteList[currentNoteIndex % currentModeNoteList.length];
                        } else if (arpMode === 'random' && notesToArp.length > 0) {
                            noteForStep = notesToArp[Math.floor(Math.random() * notesToArp.length)];
                        } else if (arpMode === 'walk') {
                            noteForStep = currentModeNoteList[currentNoteIndex % currentModeNoteList.length];
                        } else if (arpMode === 'normalWalk') {
                            noteForStep = currentModeNoteList[currentNoteIndex % currentModeNoteList.length];
                        }

                        if (arpMode !== 'chord' && arpMode !== 'chordN') {
                            if (noteForStep !== '') {
                                playNotes(noteForStep);
                                if (arpMode !== 'walk' && arpMode !== 'normalWalk') {
                                    currentNoteIndex++;
                                }
                                if (arpMode === 'stableShuffled') stableShuffleIndex++;
                                advancePatternIndex();
                                stepType = 'note';
                                highlightCurrentStep('note', noteForStep);
                                highlightPlaybackPianoKeys(noteForStep);
                                patternEventProcessed = true;
                            } else {
                                stepType = 'rest';
                                patternEventProcessed = true;
                                advancePatternIndex();
                                highlightCurrentStep('rest', null);
                            }
                        } else if ((arpMode === 'chord' || arpMode === 'chordN') && currentModeNoteList.length === 0) {
                            stepType = 'rest';
                            patternEventProcessed = true;
                            advancePatternIndex();
                            highlightCurrentStep('rest', null);
                        }
                        if (arpMode === 'chordN') {
                            currentNoteIndex++;
                        }


                    } else if (patternStepType === PATTERN_SKIP) {
                        advancePatternIndex();
                        currentNoteIndex++;
                        if (arpMode === 'stableShuffled') stableShuffleIndex++;
                    } else {
                        stepType = 'error';
                        patternEventProcessed = true;
                        highlightCurrentStep('error', null);
                        break;
                    }
                    if (patternEventProcessed) break;
                }
            } else if (rhythmEventActive && currentRhythmEvent === RHYTHM_REST) {
                stepType = 'rest';
                highlightCurrentStep('rest', null);
            } else {
                stepType = 'error_arp_rhythm';
                highlightCurrentStep('error', null);
            }

            if (stepType !== null) {
                updatePlaybackDisplay(stepType, (stepType === 'note' && arpMode !== 'chord' && arpMode !== 'chordN') ? noteForStep : null, (arpMode === 'chord' || arpMode === 'chordN'));
            }

            if (arpMode === 'walk') {
                advanceWalkIndex();
            } else if (arpMode === 'normalWalk') {
                advanceNormalWalkIndex();
            } else {
                advanceRhythmIndex();
            }
        }

        /**
         * Calculates velocity based on pressure, base velocity, and max velocity.
         * @param {number} pressure - MIDI pressure value (0-127).
         * @returns {number} - Calculated velocity (0-127).
         */
        function calculateVelocity(pressure) {
            let velocity = baseVelocityValue + (maxVelocityValue - baseVelocityValue) * (pressure / 127);
            return Math.round(velocity);
        }

        /**
         * Sends a MIDI note on and note off message. Handles MPE/non-MPE output and gate duration.
         * @param {number} note - MIDI note number.
         * @param {number} velocity - MIDI velocity (0-127).
         * @param {number} outputChannel - MIDI output channel (0-15).
         */
        function sendMidiNote(note, velocity, outputChannel) {
            if (midiOutput) {
                const gateDurationMs = calculateGateDuration(clockDivisionDurationMs, gateLengthPercentage, (isGateFlexEnabled ? rhythmGateMultipliers[currentRhythmIndex] : 1));

                if (mpeOutputMode === 'mpe') {
                    midiOutput.send([0xE0 + outputChannel, 0, 0x40, 0x90 + outputChannel, note, velocity]);
                    setTimeout(() => {
                        midiOutput.send([0x80 + outputChannel, note, 0]);
                    }, gateDurationMs);
                } else {
                    midiOutput.send([0x90 + outputChannel, note, velocity]);
                    setTimeout(() => {
                        midiOutput.send([0x80 + outputChannel, note, 0]);
                    }, gateDurationMs);
                }
            }
        }

        /**
         * Plays a single note or an array of notes, with optional sub-arpeggiation for chords and sub-arp modes.
         * @param {number|number[]} notes - MIDI note number or array of MIDI note numbers to play.
         * @param {string} [subArpMode='up'] - Optional sub-arpeggiation mode (e.g., 'up', 'down', 'random'). Defaults to 'up'.
         */
        function playNotes(notes, subArpMode = 'up') {
            if (midiOutput) {
                let outputChannel = parseInt(mpeGlobalOutputChannel) - 1;
                const notesArray = Array.isArray(notes) ? notes : [notes];

                if (notesArray.length > 1 && subArpScalePercentage > 0 && (arpMode === 'chord' || arpMode === 'chordN')) {
                    // Sub-Arpeggiation Logic for Chords
                    const subArpDuration = (clockDivisionDurationMs * subArpScalePercentage) / 100;
                    const noteSpacing = subArpDuration / notesArray.length;

                    let subArpedChordNotes = [...notesArray];

                    switch (subArpMode) {
                        case 'up':
                            subArpedChordNotes.sort((a, b) => a - b);
                            break;
                        case 'down':
                            subArpedChordNotes.sort((a, b) => b - a);
                            break;
                        case 'random':
                            subArpedChordNotes.sort(() => Math.random() - 0.5);
                            break;
                        case 'converge':
                            subArpedChordNotes = generateConvergeNoteList(subArpedChordNotes.sort((a, b) => a - b));
                            break;
                        case 'diverge':
                            subArpedChordNotes = generateDivergeNoteList(subArpedChordNotes.sort((a, b) => a - b));
                            break;
                        default:
                            subArpedChordNotes.sort((a, b) => a - b);
                            break;
                    }

                    subArpedChordNotes.forEach((expandedNote, index) => {
                        const originalNote = octaveExpandedNoteMap.get(expandedNote);
                        let pressure = notePressures.get(originalNote) || defaultNotePressure;
                        let velocity = calculateVelocity(pressure);
                        const delay = noteSpacing * index;
                        setTimeout(() => {
                            sendMidiNote(expandedNote, velocity, outputChannel);
                        }, delay);
                    });
                } else {
                    // Play notes simultaneously (or single note)
                    notesArray.forEach(expandedNote => {
                        const originalNote = octaveExpandedNoteMap.get(expandedNote);
                        let pressure = notePressures.get(originalNote) || defaultNotePressure;
                        let velocity = calculateVelocity(pressure);
                        sendMidiNote(expandedNote, velocity, outputChannel);
                    });
                }
            }
        }

        /**
         * Sends MIDI note off messages for all held notes.
         */
        function allNotesOff() {
            if (midiOutput) {
                let outputChannel = parseInt(mpeGlobalOutputChannel) - 1;
                for (const note of heldNotes) {
                    midiOutput.send([0x80 + outputChannel, note, 0]);
                }
            }
        }

        /**
         * Updates the playback display with the latest arpeggiator step.
         * @param {string} stepType - Type of step ('note', 'rest', 'skip', 'error').
         * @param {number|null} note - MIDI note number for 'note' steps, null otherwise.
         * @param {boolean} [isChord=false] - True if a chord was played in this step, false otherwise.
         */
        function updatePlaybackDisplay(stepType, note, isChord = false) {
            if (stepType === null) return;

            const stepElem = document.createElement('div');
            stepElem.classList.add('playback-step');
            stepElem.classList.add(stepType);

            if (stepType === 'note') {
                if (isChord) {
                    if (arpMode === 'chordN') {
                        stepElem.textContent = `Ch${((currentNoteIndex + currentModeNoteList.length - 1) % currentModeNoteList.length) + 1}`;
                    } else {
                        stepElem.textContent = 'Ch';
                    }
                } else if (note !== null) {
                    stepElem.textContent = midiNoteToName(note);
                }
            } else if (stepType === 'rest') {
                stepElem.textContent = 'R';
            } else if (stepType === 'skip') {
                stepElem.textContent = 'S';
            } else if (stepType === 'error') {
                stepElem.textContent = '!';
            }

            playbackDisplayElem.appendChild(stepElem);

            if (playbackDisplayElem.children.length > maxPlaybackSteps) {
                playbackDisplayElem.removeChild(playbackDisplayElem.firstChild);
            }
            playbackDisplayElem.scrollLeft = playbackDisplayElem.scrollWidth;
        }

        /**
         * Generates the piano keyboard UI.
         */
        function generatePianoKeyboardUI() {
            const pianoKeyboard = document.getElementById('pianoKeyboard');
            const startNote = 48; // Low C (C3)
            const numberOfKeys = 25;

            for (let i = 0; i < numberOfKeys; i++) {
                const noteValue = startNote + i;
                const noteName = notes[i % 12];
                const key = document.createElement('div');
                key.classList.add('key');
                key.dataset.note = noteValue;
                key.textContent = noteName;
                key.id = `pianoKey-${noteValue}`;

                if (noteName.includes('#')) {
                    key.classList.add('black-key');
                } else {
                    key.classList.add('white-key');
                }

                key.addEventListener('click', function() {
                    noteOn(noteValue, 'ui');
                });

                pianoKeyboard.appendChild(key);
            }
        }

        /**
         * Updates the visual state of a piano key in the UI.
         * @param {number} note - MIDI note number of the key.
         * @param {string|null} source - Source of the hold ('ui', 'midi', or null to reset).
         */
        function updatePianoKeyboardUI(note, source) {
            const keyElement = document.getElementById(`pianoKey-${note}`);
            if (!keyElement) return;

            keyElement.classList.remove('key-held-ui', 'key-held-midi', 'key-current');

            if (heldNotesUI.has(note) && source === 'ui') {
                keyElement.classList.add('key-held-ui');
            } else if (heldNotesUI.has(note) && source === null) {
                keyElement.classList.add('key-held-ui');
            } else if (heldNotesMIDI.has(note) && source === 'midi') {
                keyElement.classList.add('key-held-midi');
            }
        }

        /**
         * Highlights piano keys in the UI to indicate current arpeggio notes.
         * Unhighlights any previously highlighted keys.
         * @param {number|number[]} notes - MIDI note number or array of MIDI note numbers of the keys to highlight.
         */
        function highlightPianoKeys(notes) {
            const notesArray = Array.isArray(notes) ? notes : [notes];
            unhighlightPianoKeys();
            if (notesArray && notesArray.length > 0) {
                notesArray.forEach(note => {
                    const keyElement = document.getElementById(`pianoKey-${note}`);
                    if (keyElement) {
                        keyElement.classList.add('key-current');
                    }
                });
            }
        }

        /**
         * Unhighlights all highlighted piano keys in the interactive keyboard.
         */
        function unhighlightPianoKeys() {
            const currentHighlightedKeys = document.querySelectorAll('#pianoKeyboard .key.key-current');
            currentHighlightedKeys.forEach(key => {
                key.classList.remove('key-current');
            });
            highlightedPianoKey = null;
        }

        /**
         * Highlights a rhythm step in the UI to indicate it's the current step.
         * Unhighlights any previously highlighted step in the same rhythm display.
         * @param {string} displayElementId - ID of the rhythm display ('patternDisplay' or 'rhythmDisplay').
         * @param {number} stepIndex - Index of the step to highlight.
         * @param {number} [gateExtension=0] - Number of steps to extend the gate highlight over (for gate flex).
         */
        function highlightRhythmStep(displayElementId, stepIndex, gateExtension = 0) {
            unhighlightRhythmStep(displayElementId);
            const stepElement = document.getElementById(`${displayElementId}-step-${stepIndex}`);
            if (stepElement) {
                stepElement.classList.add('current-step');
            }
            if (isGateFlexEnabled && displayElementId === 'rhythmDisplay' && gateExtension > 1) {
                for (let i = 1; i < gateExtension; i++) {
                    const extendedStepIndex = (stepIndex + i) % rhythm.length;
                    const extendedStepElement = document.getElementById(`${displayElementId}-step-${extendedStepIndex}`);
                    if (extendedStepElement) {
                        extendedStepElement.classList.add('gate-extended-step');
                    }
                }
            }
        }

        /**
         * Unhighlights the currently highlighted rhythm step for a given rhythm display.
         * @param {string} displayElementId - ID of the rhythm display ('patternDisplay' or 'rhythmDisplay').
         */
        function unhighlightRhythmStep(displayElementId) {
            const currentHighlighted = (displayElementId === 'patternDisplay') ? document.querySelector('#patternDisplay .current-step') : document.querySelector('#rhythmDisplay .current-step');
            if (currentHighlighted) {
                currentHighlighted.classList.remove('current-step');
            }
            const gateExtendedSteps = (displayElementId === 'rhythmDisplay') ? document.querySelectorAll('#rhythmDisplay .rhythm-step.gate-extended-step') : [];
            gateExtendedSteps.forEach(step => step.classList.remove('gate-extended-step'));
        }

        /**
         * Highlights the current step in the pattern rhythm display, only if not disabled.
         */
        function highlightCurrentPatternStep() {
            if (!isPatternDisabled) {
                highlightRhythmStep('patternDisplay', (currentPatternIndex + patternRhythm.length - 1) % patternRhythm.length);
            }
        }

        /**
         * Highlights the current step in the arpeggio rhythm display, only if not disabled.
         */
        function highlightCurrentArpRhythmStep() {
            if (!isRhythmDisabled) {
                highlightRhythmStep('rhythmDisplay', currentRhythmIndex, isGateFlexEnabled ? rhythmGateMultipliers[currentRhythmIndex] : 0);
            }
        }

        /**
         * Unhighlights all current step highlights (rhythm steps and piano key).
         */
        function unhighlightCurrentStep() {
            unhighlightRhythmStep('patternDisplay');
            unhighlightRhythmStep('rhythmDisplay');
            unhighlightPianoKeys();
        }

        /**
         * Highlights the current arpeggiator step in the UI (rhythm steps and piano key).
         * @param {string} stepType - Type of step ('note', 'rest', 'skip').
         * @param {number|null} note - MIDI note number to highlight on the piano key, null otherwise.
         * @param {boolean} [highlightAllKeys=false] - If true, highlights all held keys (for chord mode).
         */
        function highlightCurrentStep(stepType, note, highlightAllKeys = false) {
            unhighlightPianoKeys();
            unhighlightPlaybackPianoKeys();

            highlightCurrentArpRhythmStep();
            highlightCurrentPatternStep();

            if (stepType === 'note') {
                if (arpMode === 'chordN') {
                    const currentChord = currentModeNoteList[currentNoteIndex % currentModeNoteList.length];
                    highlightPianoKeys(currentChord);
                    highlightPlaybackPianoKeys(currentChord);
                } else if (highlightAllKeys) {
                    highlightPianoKeys(heldNotes);
                    highlightPlaybackPianoKeys(heldNotes);
                } else if (note !== null) {
                    highlightPianoKeys(note);
                    highlightPlaybackPianoKeys(note);
                }
            }
        }

        /**
         * Generates the non-interactive playback piano keyboard UI.
         */
        function generatePlaybackPianoKeyboardUI() {
            const playbackKeyboard = document.getElementById('playbackKeyboardDisplay');
            const startNote = 36; // C2
            const numberOfKeys = 61; // 5 octaves (C2 to C7)

            for (let i = 0; i < numberOfKeys; i++) {
                const noteValue = startNote + i;
                const noteName = notes[i % 12];
                const key = document.createElement('div');
                key.classList.add('playback-key');
                key.dataset.note = noteValue;
                key.id = `playbackKey-${noteValue}`;

                if (noteName && noteName.includes('#')) {
                    key.classList.add('playback-black-key');
                } else {
                    key.classList.add('playback-white-key');
                }
                playbackKeyboard.appendChild(key);
            }
        }

        /**
         * Updates the visual state of the playback piano keyboard UI based on held and playing notes.
         */
        function updatePlaybackKeyboardUI() {
            const playbackKeys = document.querySelectorAll('.playback-key');
            playbackKeys.forEach(key => {
                const note = parseInt(key.dataset.note);
                key.classList.remove('key-held-ui', 'key-held-midi', 'key-current', 'key-held-octave-expanded');

                if (heldNotesUI.has(note)) {
                    key.classList.add('key-held-ui');
                } else if (heldNotesMIDI.has(note)) {
                    key.classList.add('key-held-midi');
                } else if (heldNotes.includes(note) && !rawHeldNotes.includes(note)) {
                    key.classList.add('key-held-octave-expanded');
                }
            });
        }

        /**
         * Highlights piano keys on the playback keyboard for chords or single notes.
         * @param {number|number[]} notes - MIDI note number or array of MIDI note numbers to highlight.
         */
        function highlightPlaybackPianoKeys(notes) {
            const notesArray = Array.isArray(notes) ? notes : [notes];
            unhighlightPlaybackPianoKeys();
            if (notesArray && notesArray.length > 0) {
                notesArray.forEach(note => {
                    const keyElement = document.getElementById(`playbackKey-${note}`);
                    if (keyElement) {
                        keyElement.classList.add('key-current');
                    }
                });
            }
        }

        /**
         * Unhighlights the currently highlighted piano key on the playback keyboard.
         */
        function unhighlightPlaybackPianoKeys() {
            const currentHighlightedKeys = document.querySelectorAll('#playbackKeyboardDisplay .playback-key.key-current');
            currentHighlightedKeys.forEach(key => {
                key.classList.remove('key-current');
            });
            highlightedPlaybackPianoKey = null;
        }

        /**
         * Clears all highlights from the playback piano keyboard (held and current notes).
         */
        function unhighlightPlaybackPianoKeysAll() {
            const playbackKeys = document.querySelectorAll('.playback-key');
            playbackKeys.forEach(key => {
                key.classList.remove('key-held-ui', 'key-held-midi', 'key-held-octave-expanded', 'key-current');
            });
            highlightedPlaybackPianoKey = null;
        }

        // --- WALK MODE FUNCTIONS ---

        /**
         * Advances the arpeggio note index for 'walk' mode based on probabilities.
         */
        function advanceWalkIndex() {
            const probabilities = calculateWalkProbabilities(walkSkew);
            const rand = Math.random();
            if (rand < probabilities.prev) {
                currentNoteIndex = (currentNoteIndex - 1 + currentModeNoteList.length) % currentModeNoteList.length;
            } else if (rand < probabilities.prev + probabilities.current) {
                // Stay at current index
            } else {
                currentNoteIndex = (currentNoteIndex + 1) % currentModeNoteList.length;
            }
            advanceRhythmIndex();
        }

        /**
         * Calculates probabilities for walk mode based on walkSkew parameter.
         * @param {number} skew - Walk skew value (-1 to 1).
         * @returns {{next: number, current: number, prev: number}} - Probabilities for next, current, and previous steps.
         */
        function calculateWalkProbabilities(skew) {
            let prob_next, prob_current, prob_prev;
            let subSkew = 0.5 + (skew / 2);
            if (skew > 0) {
                prob_next = (2 / 3) * skew + (1 / 3);
                prob_current = (1 - prob_next) * subSkew;
                prob_prev = (1 - prob_next - prob_current);
            } else { // skew <= 0
                prob_prev = (1 / 3) - (2 / 3) * skew;
                prob_next = (1 - prob_prev) * subSkew;
                prob_current = (1 - prob_prev - prob_next);
            }
            return {
                next: prob_next,
                current: prob_current,
                prev: prob_prev
            };
        }

        /**
         * Advances the arpeggio note index for 'normalWalk' mode using normal distribution.
         */
        function advanceNormalWalkIndex() {
            let NoteCenterIndex = currentNoteIndex + 0.5;
            const sigma = 0.3 + walkDistance;
            const mu = 2 * walkSkew;

            const stepChange = sampleNormalDistribution(mu, sigma);
            const maxStepChange = 3.4999;
            const clampedStepChange = Math.max(-maxStepChange, Math.min(maxStepChange, stepChange));

            currentNoteIndex = (Math.floor(currentNoteIndex + clampedStepChange) + currentModeNoteList.length * Math.ceil(maxStepChange)) % currentModeNoteList.length;
            advanceRhythmIndex();
        }

        /**
         * Samples from a normal distribution using Box-Muller transform.
         * @param {number} mu - Mean of the distribution.
         * @param {number} sigma - Standard deviation of the distribution.
         * @returns {number} - A sample from the normal distribution.
         */
        function sampleNormalDistribution(mu, sigma) {
            let u1 = 0,
                u2 = 0;
            while (u1 === 0) u1 = Math.random();
            while (u2 === 0) u2 = Math.random();

            const z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);

            return z0 * sigma + mu;
        }

        // --- Initialization ---
        generatePianoKeyboardUI();
        generatePlaybackPianoKeyboardUI();
        updatePlaybackKeyboardUI();
        updateRhythmDisplays();
        updateModeNoteList();
        document.getElementById('chordNValueDisplay').textContent = chordNValue;
        document.getElementById('baseVelocityValue').textContent = baseVelocityValue;
        document.getElementById('maxVelocityValue').textContent = maxVelocityValue;
        document.getElementById('walkSkewValue').textContent = walkSkew.toFixed(2);
        document.getElementById('walkDistanceValue').textContent = walkDistance.toFixed(2);
        document.getElementById('gateLengthValue').textContent = gateLengthPercentage;
        document.getElementById('subArpScaleValue').textContent = subArpScalePercentage;
        updateTempoDisplay();
        updatePatternControlsState();
        updateRhythmControlsState();
    </script>
</body>
</html>
